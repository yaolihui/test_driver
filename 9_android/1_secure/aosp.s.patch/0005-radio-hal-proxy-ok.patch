From e77ccea35e09a1caa078f4b0f804334f33ddb3dd Mon Sep 17 00:00:00 2001
From: tanshuai <tanshuai@xdja.com>
Date: Mon, 5 Sep 2022 22:48:58 +0800
Subject: [PATCH 5/5] radio hal proxy ok

---
 .../com/android/internal/telephony/RIL.java   |   23 +-
 .../radio/1.6/radio_hal_proxy/Android.bp      |   73 +
 .../RadioIndication_V1_6_Proxy.cpp            |  706 ++++++
 .../RadioIndication_V1_6_Proxy.h              |  185 ++
 .../RadioResponse_V1_6_Proxy.cpp              | 1899 +++++++++++++++++
 .../RadioResponse_V1_6_Proxy.h                |  449 ++++
 .../radio/1.6/radio_hal_proxy/proxy_common.h  |    3 +
 .../radio_hal_proxy/radio_hidl_hal_proxy.cpp  |  152 ++
 .../radio_hal_proxy/ril_service_1_6_proxy.cpp | 1078 ++++++++++
 .../radio_hal_proxy/ril_service_1_6_proxy.h   |  482 +++++
 10 files changed, 5040 insertions(+), 10 deletions(-)
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/Android.bp
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.cpp
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.h
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.cpp
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.h
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/proxy_common.h
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/radio_hidl_hal_proxy.cpp
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.cpp
 create mode 100755 hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.h

diff --git a/frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java b/frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java
index 56c81d1da3..bdbb532288 100644
--- a/frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java
+++ b/frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java
@@ -299,7 +299,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
     //***** Constants
 
     static final String[] HIDL_SERVICE_NAME = {"slot1", "slot2", "slot3"};
-
+    static final String[] HIDL_SERVICE_NAME_PROXY = {"slot1_proxy", "slot2_proxy", "slot3_proxy"};
     static final int IRADIO_GET_SERVICE_DELAY_MILLIS = 4 * 1000;
 
     static final String EMPTY_ALPHA_LONG = "";
@@ -493,20 +493,22 @@ public class RIL extends BaseCommands implements CommandsInterface {
 
         try {
             if (mDisabledRadioServices.contains(mPhoneId)) {
-                riljLoge("getRadioProxy: mRadioProxy for " + HIDL_SERVICE_NAME[mPhoneId]
+                riljLoge("getRadioProxy: mRadioProxy for " + HIDL_SERVICE_NAME_PROXY[mPhoneId]
                         + " is disabled");
             } else {
                 try {
                     mRadioProxy = android.hardware.radio.V1_6.IRadio.getService(
-                            HIDL_SERVICE_NAME[mPhoneId], true);
+                            HIDL_SERVICE_NAME_PROXY[mPhoneId], true);
                     mRadioVersion = RADIO_HAL_VERSION_1_6;
                 } catch (NoSuchElementException e) {
                 }
 
                 if (mRadioProxy == null) {
+                    riljLoge("getRadioProxy: mRadioProxy for android.hardware.radio.V1_6.IRadio " + HIDL_SERVICE_NAME_PROXY[mPhoneId]
+                        + " is fail");
                     try {
                         mRadioProxy = android.hardware.radio.V1_5.IRadio.getService(
-                                HIDL_SERVICE_NAME[mPhoneId], true);
+                                HIDL_SERVICE_NAME_PROXY[mPhoneId], true);
                         mRadioVersion = RADIO_HAL_VERSION_1_5;
                     } catch (NoSuchElementException e) {
                     }
@@ -515,7 +517,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 if (mRadioProxy == null) {
                     try {
                         mRadioProxy = android.hardware.radio.V1_4.IRadio.getService(
-                                HIDL_SERVICE_NAME[mPhoneId], true);
+                                HIDL_SERVICE_NAME_PROXY[mPhoneId], true);
                         mRadioVersion = RADIO_HAL_VERSION_1_4;
                     } catch (NoSuchElementException e) {
                     }
@@ -524,7 +526,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 if (mRadioProxy == null) {
                     try {
                         mRadioProxy = android.hardware.radio.V1_3.IRadio.getService(
-                                HIDL_SERVICE_NAME[mPhoneId], true);
+                                HIDL_SERVICE_NAME_PROXY[mPhoneId], true);
                         mRadioVersion = RADIO_HAL_VERSION_1_3;
                     } catch (NoSuchElementException e) {
                     }
@@ -533,7 +535,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 if (mRadioProxy == null) {
                     try {
                         mRadioProxy = android.hardware.radio.V1_2.IRadio.getService(
-                                HIDL_SERVICE_NAME[mPhoneId], true);
+                                HIDL_SERVICE_NAME_PROXY[mPhoneId], true);
                         mRadioVersion = RADIO_HAL_VERSION_1_2;
                     } catch (NoSuchElementException e) {
                     }
@@ -542,7 +544,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 if (mRadioProxy == null) {
                     try {
                         mRadioProxy = android.hardware.radio.V1_1.IRadio.getService(
-                                HIDL_SERVICE_NAME[mPhoneId], true);
+                                HIDL_SERVICE_NAME_PROXY[mPhoneId], true);
                         mRadioVersion = RADIO_HAL_VERSION_1_1;
                     } catch (NoSuchElementException e) {
                     }
@@ -551,7 +553,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 if (mRadioProxy == null) {
                     try {
                         mRadioProxy = android.hardware.radio.V1_0.IRadio.getService(
-                                HIDL_SERVICE_NAME[mPhoneId], true);
+                                HIDL_SERVICE_NAME_PROXY[mPhoneId], true);
                         mRadioVersion = RADIO_HAL_VERSION_1_0;
                     } catch (NoSuchElementException e) {
                     }
@@ -560,11 +562,12 @@ public class RIL extends BaseCommands implements CommandsInterface {
                 if (mRadioProxy != null) {
                     mRadioProxy.linkToDeath(mRadioProxyDeathRecipient,
                             mRadioProxyCookie.incrementAndGet());
+                    riljLoge("gwb call mRadioProxy.setResponseFunctions");
                     mRadioProxy.setResponseFunctions(mRadioResponse, mRadioIndication);
                 } else {
                     mDisabledRadioServices.add(mPhoneId);
                     riljLoge("getRadioProxy: mRadioProxy for "
-                            + HIDL_SERVICE_NAME[mPhoneId] + " is disabled");
+                            + HIDL_SERVICE_NAME_PROXY[mPhoneId] + " is disabled");
                 }
             }
         } catch (RemoteException e) {
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/Android.bp b/hardware/interfaces/radio/1.6/radio_hal_proxy/Android.bp
new file mode 100755
index 0000000000..434ea4a8b2
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/Android.bp
@@ -0,0 +1,73 @@
+//
+// Copyright (C) 2019 The Android Open Source Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+
+package {
+    // See: http://go/android-license-faq
+    // A large-scale-change added 'default_applicable_licenses' to import
+    // all of the 'license_kinds' from "hardware_interfaces_license"
+    // to get the below license kinds:
+    //   SPDX-license-identifier-Apache-2.0
+    default_applicable_licenses: ["hardware_interfaces_license"],
+}
+
+cc_defaults {
+    name: "HidlProxyDefaults",
+    defaults: [
+        "hidl_defaults",
+    ],
+
+    // Lists all dependencies that can *not* be expected on the device.
+    static_libs: [
+        "libhidl-gen-utils",
+    ],
+
+    group_static_libs: true,
+
+    // Lists all system dependencies that can be expected on the device.
+    shared_libs: [
+        "libbase",
+        // All the following are dependencies of any HAL definition library.
+        "libcutils",
+        "liblog",
+        "libhidlbase",
+        "libutils",
+    ],
+
+    require_root: true,
+}
+
+cc_binary {
+    name: "radio_hal_proxy",
+    defaults: ["HidlProxyDefaults"],
+    srcs: [
+        "radio_hidl_hal_proxy.cpp",
+        "RadioIndication_V1_6_Proxy.cpp",
+        "RadioResponse_V1_6_Proxy.cpp",
+        "ril_service_1_6_proxy.cpp",
+    ],
+    static_libs: [
+        "android.hardware.radio@1.6",
+        "android.hardware.radio@1.5",
+        "android.hardware.radio@1.4",
+        "android.hardware.radio@1.3",
+        "android.hardware.radio@1.2",
+        "android.hardware.radio@1.1",
+        "android.hardware.radio@1.0",
+        "android.hardware.radio.config@1.0",
+        "android.hardware.radio.config@1.1",
+    ],
+    header_libs: ["radio.util.header@1.0"],
+}
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.cpp b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.cpp
new file mode 100755
index 0000000000..66d12ee39d
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.cpp
@@ -0,0 +1,706 @@
+#define LOG_TAG "RADIO_HAL_PROXY"
+#include <log/log.h>
+#include "RadioIndication_V1_6_Proxy.h"
+
+
+RadioIndication_v1_6_Proxy::RadioIndication_v1_6_Proxy() {
+    for (int32_t sysId = 0; sysId < MAX_SYS_NUM; sysId++) {
+        mRadioIndication[sysId] = nullptr;
+    }
+}
+
+int32_t RadioIndication_v1_6_Proxy::setCallback(int sysId, sp<::android::hardware::radio::V1_6::IRadioIndication> radioIndication) {
+    int32_t i = 0;
+
+    if (sysId >= MAX_SYS_NUM) {
+        RLOGE("RadioIndication_v1_6_Proxy::setCallback SysId=%d Error!", sysId);
+        return -1;
+    }
+
+    if (-1 != sysId) {
+        mRadioIndication[sysId] = radioIndication;
+        return sysId;
+    }
+
+    //get a free slot
+    for (i = 0; i < MAX_SYS_NUM; i++) {
+        if (nullptr == mRadioIndication[i]) {
+            break;
+        }
+    }
+
+    if (i >= MAX_SYS_NUM) {
+        RLOGE("[RadioIndication_v1_6_Proxy::setCallback] no free slot!");
+        return -1;
+    }
+
+    mRadioIndication[i] = radioIndication;
+    return i;
+}
+
+
+Return<void> RadioIndication_v1_6_Proxy::radioStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::RadioState radioState) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->radioStateChanged(type, radioState);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::callStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->callStateChanged(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::networkStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->networkStateChanged(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::newSms(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<uint8_t>& pdu) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->newSms(type, pdu);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::newSmsStatusReport(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<uint8_t>& pdu) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->newSmsStatusReport(type, pdu);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::newSmsOnSim(::android::hardware::radio::V1_0::RadioIndicationType type, int32_t recordNumber) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->newSmsOnSim(type, recordNumber);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::onUssd(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::UssdModeType modeType, const ::android::hardware::hidl_string& msg) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->onUssd(type, modeType, msg);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::nitzTimeReceived(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& nitzTime, uint64_t receivedTime) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->nitzTimeReceived(type, nitzTime, receivedTime);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentSignalStrength(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::SignalStrength& signalStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentSignalStrength(type, signalStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::dataCallListChanged(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::SetupDataCallResult>& dcList) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->dataCallListChanged(type, dcList);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::suppSvcNotify(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::SuppSvcNotification& suppSvc) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->suppSvcNotify(type, suppSvc);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::stkSessionEnd(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->stkSessionEnd(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::stkProactiveCommand(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& cmd) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->stkProactiveCommand(type, cmd);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::stkEventNotify(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& cmd) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->stkEventNotify(type, cmd);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::stkCallSetup(::android::hardware::radio::V1_0::RadioIndicationType type, int64_t timeout) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->stkCallSetup(type, timeout);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::simSmsStorageFull(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->simSmsStorageFull(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::simRefresh(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::SimRefreshResult& refreshResult) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->simRefresh(type, refreshResult);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::callRing(::android::hardware::radio::V1_0::RadioIndicationType type, bool isGsm, const ::android::hardware::radio::V1_0::CdmaSignalInfoRecord& record) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->callRing(type, isGsm, record);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::simStatusChanged(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->simStatusChanged(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cdmaNewSms(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::CdmaSmsMessage& msg) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cdmaNewSms(type, msg);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::newBroadcastSms(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<uint8_t>& data) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->newBroadcastSms(type, data);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cdmaRuimSmsStorageFull(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cdmaRuimSmsStorageFull(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::restrictedStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::PhoneRestrictedState state) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->restrictedStateChanged(type, state);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::enterEmergencyCallbackMode(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->enterEmergencyCallbackMode(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cdmaCallWaiting(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::CdmaCallWaiting& callWaitingRecord) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cdmaCallWaiting(type, callWaitingRecord);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cdmaOtaProvisionStatus(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::CdmaOtaProvisionStatus status) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cdmaOtaProvisionStatus(type, status);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cdmaInfoRec(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::CdmaInformationRecords& records) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cdmaInfoRec(type, records);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::indicateRingbackTone(::android::hardware::radio::V1_0::RadioIndicationType type, bool start) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->indicateRingbackTone(type, start);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::resendIncallMute(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->resendIncallMute(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cdmaSubscriptionSourceChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::CdmaSubscriptionSource cdmaSource) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cdmaSubscriptionSourceChanged(type, cdmaSource);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cdmaPrlChanged(::android::hardware::radio::V1_0::RadioIndicationType type, int32_t version) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cdmaPrlChanged(type, version);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::exitEmergencyCallbackMode(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->exitEmergencyCallbackMode(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::rilConnected(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->rilConnected(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::voiceRadioTechChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::RadioTechnology rat) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->voiceRadioTechChanged(type, rat);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cellInfoList(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CellInfo>& records) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cellInfoList(type, records);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::imsNetworkStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->imsNetworkStateChanged(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::subscriptionStatusChanged(::android::hardware::radio::V1_0::RadioIndicationType type, bool activate) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->subscriptionStatusChanged(type, activate);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::srvccStateNotify(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::SrvccState state) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->srvccStateNotify(type, state);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::hardwareConfigChanged(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::HardwareConfig>& configs) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->hardwareConfigChanged(type, configs);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::radioCapabilityIndication(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::RadioCapability& rc) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->radioCapabilityIndication(type, rc);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::onSupplementaryServiceIndication(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::StkCcUnsolSsResult& ss) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->onSupplementaryServiceIndication(type, ss);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::stkCallControlAlphaNotify(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& alpha) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->stkCallControlAlphaNotify(type, alpha);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::lceData(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::LceDataInfo& lce) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->lceData(type, lce);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::pcoData(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::PcoDataInfo& pco) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->pcoData(type, pco);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::modemReset(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& reason) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->modemReset(type, reason);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::carrierInfoForImsiEncryption(::android::hardware::radio::V1_0::RadioIndicationType info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->carrierInfoForImsiEncryption(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::networkScanResult(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_1::NetworkScanResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->networkScanResult(type, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::keepaliveStatus(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_1::KeepaliveStatus& status) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->keepaliveStatus(type, status);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::networkScanResult_1_2(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_2::NetworkScanResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->networkScanResult_1_2(type, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cellInfoList_1_2(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::CellInfo>& records) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cellInfoList_1_2(type, records);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentLinkCapacityEstimate(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_2::LinkCapacityEstimate& lce) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentLinkCapacityEstimate(type, lce);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentPhysicalChannelConfigs(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::PhysicalChannelConfig>& configs) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentPhysicalChannelConfigs(type, configs);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentSignalStrength_1_2(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_2::SignalStrength& signalStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentSignalStrength_1_2(type, signalStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentEmergencyNumberList(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::EmergencyNumber>& emergencyNumberList) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentEmergencyNumberList(type, emergencyNumberList);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cellInfoList_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::CellInfo>& records) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cellInfoList_1_4(type, records);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::networkScanResult_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_4::NetworkScanResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->networkScanResult_1_4(type, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentPhysicalChannelConfigs_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::PhysicalChannelConfig>& configs) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentPhysicalChannelConfigs_1_4(type, configs);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::dataCallListChanged_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::SetupDataCallResult>& dcList) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->dataCallListChanged_1_4(type, dcList);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentSignalStrength_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_4::SignalStrength& signalStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentSignalStrength_1_4(type, signalStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::uiccApplicationsEnablementChanged(::android::hardware::radio::V1_0::RadioIndicationType type, bool enabled) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->uiccApplicationsEnablementChanged(type, enabled);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::registrationFailed(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_5::CellIdentity& cellIdentity, const ::android::hardware::hidl_string& chosenPlmn, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_5::Domain> domain, int32_t causeCode, int32_t additionalCauseCode) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->registrationFailed(type, cellIdentity, chosenPlmn, domain, causeCode, additionalCauseCode);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::barringInfoChanged(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_5::CellIdentity& cellIdentity, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::BarringInfo>& barringInfos) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->barringInfoChanged(type, cellIdentity, barringInfos);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cellInfoList_1_5(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::CellInfo>& records) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cellInfoList_1_5(type, records);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::networkScanResult_1_5(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_5::NetworkScanResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->networkScanResult_1_5(type, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::dataCallListChanged_1_5(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::SetupDataCallResult>& dcList) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->dataCallListChanged_1_5(type, dcList);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::dataCallListChanged_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::SetupDataCallResult>& dcList) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->dataCallListChanged_1_6(type, dcList);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::unthrottleApn(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& apn) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->unthrottleApn(type, apn);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentLinkCapacityEstimate_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_6::LinkCapacityEstimate& lce) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentLinkCapacityEstimate_1_6(type, lce);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentSignalStrength_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_6::SignalStrength& signalStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentSignalStrength_1_6(type, signalStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::cellInfoList_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::CellInfo>& records) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->cellInfoList_1_6(type, records);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::networkScanResult_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_6::NetworkScanResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->networkScanResult_1_6(type, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::currentPhysicalChannelConfigs_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::PhysicalChannelConfig>& configs) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->currentPhysicalChannelConfigs_1_6(type, configs);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::simPhonebookChanged(::android::hardware::radio::V1_0::RadioIndicationType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->simPhonebookChanged(type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioIndication_v1_6_Proxy::simPhonebookRecordsReceived(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_6::PbReceivedStatus status, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::PhonebookRecordInfo>& records) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioIndication[i] != nullptr) {
+            mRadioIndication[i]->simPhonebookRecordsReceived(type, status, records);
+        }
+    }
+    return Void();
+}
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.h b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.h
new file mode 100755
index 0000000000..2298a5ca83
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioIndication_V1_6_Proxy.h
@@ -0,0 +1,185 @@
+#pragma once
+
+#include <android/hardware/radio/1.6/IRadio.h>
+#include <android/hardware/radio/1.6/IRadioIndication.h>
+#include <android/hardware/radio/1.6/IRadioResponse.h>
+#include <android/hardware/radio/1.6/types.h>
+#include "proxy_common.h"
+
+using namespace ::android::hardware::radio::V1_6;
+using namespace ::android::hardware::radio::V1_5;
+using namespace ::android::hardware::radio::V1_4;
+using namespace ::android::hardware::radio::V1_3;
+using namespace ::android::hardware::radio::V1_2;
+using namespace ::android::hardware::radio::V1_1;
+using namespace ::android::hardware::radio::V1_0;
+
+using ::android::sp;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+
+class RadioIndication_v1_6_Proxy : public ::android::hardware::radio::V1_6::IRadioIndication {
+  private:
+    sp<::android::hardware::radio::V1_6::IRadioIndication> mRadioIndication[MAX_SYS_NUM];
+
+  public:
+    RadioIndication_v1_6_Proxy();
+    virtual ~RadioIndication_v1_6_Proxy() = default;
+
+    //static ::android::hardware::Return<::android::sp<::android::hardware::radio::V1_6::IRadioIndication>> castFrom(const ::android::sp<::android::hardware::radio::V1_0::IRadioIndication>& parent, bool emitError = false) {
+    //    return ::android::sp<::android::hardware::radio::V1_6::IRadioIndication>(static_cast<::android::hardware::radio::V1_6::IRadioIndication*>(parent.get()));
+    //}
+
+    int32_t setCallback(int sysId, sp<::android::hardware::radio::V1_6::IRadioIndication> radioIndication);
+        
+    Return<void> radioStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::RadioState radioState);
+
+    Return<void> callStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> networkStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> newSms(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<uint8_t>& pdu);
+
+    Return<void> newSmsStatusReport(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<uint8_t>& pdu);
+
+    Return<void> newSmsOnSim(::android::hardware::radio::V1_0::RadioIndicationType type, int32_t recordNumber);
+
+    Return<void> onUssd(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::UssdModeType modeType, const ::android::hardware::hidl_string& msg);
+
+    Return<void> nitzTimeReceived(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& nitzTime, uint64_t receivedTime);
+
+    Return<void> currentSignalStrength(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::SignalStrength& signalStrength);
+
+    Return<void> dataCallListChanged(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::SetupDataCallResult>& dcList);
+
+    Return<void> suppSvcNotify(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::SuppSvcNotification& suppSvc);
+
+    Return<void> stkSessionEnd(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> stkProactiveCommand(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& cmd);
+
+    Return<void> stkEventNotify(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& cmd);
+
+    Return<void> stkCallSetup(::android::hardware::radio::V1_0::RadioIndicationType type, int64_t timeout);
+
+    Return<void> simSmsStorageFull(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> simRefresh(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::SimRefreshResult& refreshResult);
+
+    Return<void> callRing(::android::hardware::radio::V1_0::RadioIndicationType type, bool isGsm, const ::android::hardware::radio::V1_0::CdmaSignalInfoRecord& record);
+
+    Return<void> simStatusChanged(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> cdmaNewSms(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::CdmaSmsMessage& msg);
+
+    Return<void> newBroadcastSms(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<uint8_t>& data);
+
+    Return<void> cdmaRuimSmsStorageFull(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> restrictedStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::PhoneRestrictedState state);
+
+    Return<void> enterEmergencyCallbackMode(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> cdmaCallWaiting(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::CdmaCallWaiting& callWaitingRecord);
+
+    Return<void> cdmaOtaProvisionStatus(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::CdmaOtaProvisionStatus status);
+
+    Return<void> cdmaInfoRec(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::CdmaInformationRecords& records);
+
+    Return<void> indicateRingbackTone(::android::hardware::radio::V1_0::RadioIndicationType type, bool start);
+
+    Return<void> resendIncallMute(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> cdmaSubscriptionSourceChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::CdmaSubscriptionSource cdmaSource);
+
+    Return<void> cdmaPrlChanged(::android::hardware::radio::V1_0::RadioIndicationType type, int32_t version);
+
+    Return<void> exitEmergencyCallbackMode(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> rilConnected(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> voiceRadioTechChanged(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::RadioTechnology rat);
+
+    Return<void> cellInfoList(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CellInfo>& records);
+
+    Return<void> imsNetworkStateChanged(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> subscriptionStatusChanged(::android::hardware::radio::V1_0::RadioIndicationType type, bool activate);
+
+    Return<void> srvccStateNotify(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_0::SrvccState state);
+
+    Return<void> hardwareConfigChanged(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::HardwareConfig>& configs);
+
+    Return<void> radioCapabilityIndication(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::RadioCapability& rc);
+
+    Return<void> onSupplementaryServiceIndication(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::StkCcUnsolSsResult& ss);
+
+    Return<void> stkCallControlAlphaNotify(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& alpha);
+
+    Return<void> lceData(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::LceDataInfo& lce);
+
+    Return<void> pcoData(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_0::PcoDataInfo& pco);
+
+    Return<void> modemReset(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& reason);
+
+    Return<void> carrierInfoForImsiEncryption(::android::hardware::radio::V1_0::RadioIndicationType info);
+
+    Return<void> networkScanResult(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_1::NetworkScanResult& result);
+
+    Return<void> keepaliveStatus(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_1::KeepaliveStatus& status);
+
+    Return<void> networkScanResult_1_2(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_2::NetworkScanResult& result);
+
+    Return<void> cellInfoList_1_2(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::CellInfo>& records);
+
+    Return<void> currentLinkCapacityEstimate(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_2::LinkCapacityEstimate& lce);
+
+    Return<void> currentPhysicalChannelConfigs(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::PhysicalChannelConfig>& configs);
+
+    Return<void> currentSignalStrength_1_2(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_2::SignalStrength& signalStrength);
+
+    Return<void> currentEmergencyNumberList(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::EmergencyNumber>& emergencyNumberList);
+
+    Return<void> cellInfoList_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::CellInfo>& records);
+
+    Return<void> networkScanResult_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_4::NetworkScanResult& result);
+
+    Return<void> currentPhysicalChannelConfigs_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::PhysicalChannelConfig>& configs);
+
+    Return<void> dataCallListChanged_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::SetupDataCallResult>& dcList);
+
+    Return<void> currentSignalStrength_1_4(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_4::SignalStrength& signalStrength);
+
+    Return<void> uiccApplicationsEnablementChanged(::android::hardware::radio::V1_0::RadioIndicationType type, bool enabled);
+
+    Return<void> registrationFailed(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_5::CellIdentity& cellIdentity, const ::android::hardware::hidl_string& chosenPlmn, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_5::Domain> domain, int32_t causeCode, int32_t additionalCauseCode);
+
+    Return<void> barringInfoChanged(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_5::CellIdentity& cellIdentity, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::BarringInfo>& barringInfos);
+
+    Return<void> cellInfoList_1_5(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::CellInfo>& records);
+
+    Return<void> networkScanResult_1_5(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_5::NetworkScanResult& result);
+
+    Return<void> dataCallListChanged_1_5(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::SetupDataCallResult>& dcList);
+
+    Return<void> dataCallListChanged_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::SetupDataCallResult>& dcList);
+
+    Return<void> unthrottleApn(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_string& apn);
+
+    Return<void> currentLinkCapacityEstimate_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_6::LinkCapacityEstimate& lce);
+
+    Return<void> currentSignalStrength_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_6::SignalStrength& signalStrength);
+
+    Return<void> cellInfoList_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::CellInfo>& records);
+
+    Return<void> networkScanResult_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::radio::V1_6::NetworkScanResult& result);
+
+    Return<void> currentPhysicalChannelConfigs_1_6(::android::hardware::radio::V1_0::RadioIndicationType type, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::PhysicalChannelConfig>& configs);
+
+    Return<void> simPhonebookChanged(::android::hardware::radio::V1_0::RadioIndicationType type);
+
+    Return<void> simPhonebookRecordsReceived(::android::hardware::radio::V1_0::RadioIndicationType type, ::android::hardware::radio::V1_6::PbReceivedStatus status, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::PhonebookRecordInfo>& records);
+
+};
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.cpp b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.cpp
new file mode 100755
index 0000000000..7084e41ebd
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.cpp
@@ -0,0 +1,1899 @@
+#define LOG_TAG "RADIO_HAL_PROXY"
+#include <log/log.h>
+#include "RadioResponse_V1_6_Proxy.h"
+
+using namespace ::android::hardware::radio::V1_6;
+using namespace ::android::hardware::radio::V1_5;
+using namespace ::android::hardware::radio::V1_4;
+using namespace ::android::hardware::radio::V1_3;
+using namespace ::android::hardware::radio::V1_2;
+using namespace ::android::hardware::radio::V1_1;
+using namespace ::android::hardware::radio::V1_0;
+
+using ::android::sp;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+
+RadioResponse_v1_6_Proxy::RadioResponse_v1_6_Proxy() {
+    for (int32_t sysId = 0; sysId < MAX_SYS_NUM; sysId++) {
+        mRadioResponse[sysId] = nullptr;
+    }
+}
+
+int32_t RadioResponse_v1_6_Proxy::setCallback(int sysId, sp<::android::hardware::radio::V1_6::IRadioResponse> radioResponse) {
+    int32_t i = 0;
+
+    if (sysId >= MAX_SYS_NUM) {
+        RLOGE("RadioResponse_v1_6_Proxy::setCallback SysId=%d Error!", sysId);
+        return -1;
+    }
+
+    if (-1 != sysId) {
+        mRadioResponse[sysId] = radioResponse;
+        return sysId;
+    }
+
+    //get a free slot
+    for (i = 0; i < MAX_SYS_NUM; i++) {
+        if (nullptr == mRadioResponse[i]) {
+            break;
+        }
+    }
+
+    if (i >= MAX_SYS_NUM) {
+        RLOGE("[RadioResponse_v1_6_Proxy::setCallback] no free slot!");
+        return -1;
+    }
+
+    mRadioResponse[i] = radioResponse;
+    return i;
+}
+
+
+
+Return<void> RadioResponse_v1_6_Proxy::getIccCardStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::CardStatus& cardStatus) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getIccCardStatusResponse(info, cardStatus);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::supplyIccPinForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->supplyIccPinForAppResponse(info, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::supplyIccPukForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->supplyIccPukForAppResponse(info, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::supplyIccPin2ForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->supplyIccPin2ForAppResponse(info, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::supplyIccPuk2ForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->supplyIccPuk2ForAppResponse(info, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::changeIccPinForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->changeIccPinForAppResponse(info, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::changeIccPin2ForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->changeIccPin2ForAppResponse(info, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::supplyNetworkDepersonalizationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->supplyNetworkDepersonalizationResponse(info, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCurrentCallsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::Call>& calls) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCurrentCallsResponse(info, calls);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::dialResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->dialResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getIMSIForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& imsi) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getIMSIForAppResponse(info, imsi);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::hangupConnectionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->hangupConnectionResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::hangupWaitingOrBackgroundResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->hangupWaitingOrBackgroundResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::hangupForegroundResumeBackgroundResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->hangupForegroundResumeBackgroundResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::switchWaitingOrHoldingAndActiveResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->switchWaitingOrHoldingAndActiveResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::conferenceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->conferenceResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::rejectCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->rejectCallResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getLastCallFailCauseResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LastCallFailCauseInfo& failCauseinfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getLastCallFailCauseResponse(info, failCauseinfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSignalStrengthResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SignalStrength& sigStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSignalStrengthResponse(info, sigStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getVoiceRegistrationStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::VoiceRegStateResult& voiceRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getVoiceRegistrationStateResponse(info, voiceRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataRegistrationStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::DataRegStateResult& dataRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataRegistrationStateResponse(info, dataRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getOperatorResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& longName, const ::android::hardware::hidl_string& shortName, const ::android::hardware::hidl_string& numeric) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getOperatorResponse(info, longName, shortName, numeric);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setRadioPowerResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setRadioPowerResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendDtmfResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendSmsResponse(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendSMSExpectMoreResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendSMSExpectMoreResponse(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setupDataCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SetupDataCallResult& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setupDataCallResponse(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::iccIOForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& iccIo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->iccIOForAppResponse(info, iccIo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendUssdResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendUssdResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::cancelPendingUssdResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->cancelPendingUssdResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getClirResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t n, int32_t m) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getClirResponse(info, n, m);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setClirResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setClirResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCallForwardStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CallForwardInfo>& callForwardInfos) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCallForwardStatusResponse(info, callForwardInfos);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCallForwardResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCallForwardResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCallWaitingResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enable, int32_t serviceClass) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCallWaitingResponse(info, enable, serviceClass);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCallWaitingResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCallWaitingResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::acknowledgeLastIncomingGsmSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->acknowledgeLastIncomingGsmSmsResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::acceptCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->acceptCallResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::deactivateDataCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->deactivateDataCallResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getFacilityLockForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t response) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getFacilityLockForAppResponse(info, response);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setFacilityLockForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t retry) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setFacilityLockForAppResponse(info, retry);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setBarringPasswordResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setBarringPasswordResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getNetworkSelectionModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool manual) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getNetworkSelectionModeResponse(info, manual);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setNetworkSelectionModeAutomaticResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setNetworkSelectionModeAutomaticResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setNetworkSelectionModeManualResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setNetworkSelectionModeManualResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getAvailableNetworksResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::OperatorInfo>& networkInfos) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getAvailableNetworksResponse(info, networkInfos);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::startDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->startDtmfResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::stopDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->stopDtmfResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getBasebandVersionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& version) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getBasebandVersionResponse(info, version);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::separateConnectionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->separateConnectionResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setMuteResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setMuteResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getMuteResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enable) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getMuteResponse(info, enable);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getClipResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::ClipStatus status) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getClipResponse(info, status);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataCallListResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::SetupDataCallResult>& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataCallListResponse(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSuppServiceNotificationsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSuppServiceNotificationsResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::writeSmsToSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t index) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->writeSmsToSimResponse(info, index);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::deleteSmsOnSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->deleteSmsOnSimResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setBandModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setBandModeResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getAvailableBandModesResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::RadioBandMode>& bandModes) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getAvailableBandModesResponse(info, bandModes);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendEnvelopeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& commandResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendEnvelopeResponse(info, commandResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendTerminalResponseToSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendTerminalResponseToSimResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::handleStkCallSetupRequestFromSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->handleStkCallSetupRequestFromSimResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::explicitCallTransferResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->explicitCallTransferResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setPreferredNetworkTypeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setPreferredNetworkTypeResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getPreferredNetworkTypeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::PreferredNetworkType nwType) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getPreferredNetworkTypeResponse(info, nwType);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getNeighboringCidsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::NeighboringCell>& cells) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getNeighboringCidsResponse(info, cells);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setLocationUpdatesResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setLocationUpdatesResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCdmaSubscriptionSourceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCdmaSubscriptionSourceResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCdmaRoamingPreferenceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCdmaRoamingPreferenceResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCdmaRoamingPreferenceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::CdmaRoamingType type) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCdmaRoamingPreferenceResponse(info, type);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setTTYModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setTTYModeResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getTTYModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::TtyMode mode) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getTTYModeResponse(info, mode);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setPreferredVoicePrivacyResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setPreferredVoicePrivacyResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getPreferredVoicePrivacyResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enable) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getPreferredVoicePrivacyResponse(info, enable);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendCDMAFeatureCodeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendCDMAFeatureCodeResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendBurstDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendBurstDtmfResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendCdmaSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendCdmaSmsResponse(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::acknowledgeLastIncomingCdmaSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->acknowledgeLastIncomingCdmaSmsResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getGsmBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::GsmBroadcastSmsConfigInfo>& configs) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getGsmBroadcastConfigResponse(info, configs);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setGsmBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setGsmBroadcastConfigResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setGsmBroadcastActivationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setGsmBroadcastActivationResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCdmaBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CdmaBroadcastSmsConfigInfo>& configs) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCdmaBroadcastConfigResponse(info, configs);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCdmaBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCdmaBroadcastConfigResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCdmaBroadcastActivationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCdmaBroadcastActivationResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCDMASubscriptionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& mdn, const ::android::hardware::hidl_string& hSid, const ::android::hardware::hidl_string& hNid, const ::android::hardware::hidl_string& min, const ::android::hardware::hidl_string& prl) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCDMASubscriptionResponse(info, mdn, hSid, hNid, min, prl);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::writeSmsToRuimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, uint32_t index) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->writeSmsToRuimResponse(info, index);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::deleteSmsOnRuimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->deleteSmsOnRuimResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDeviceIdentityResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& imei, const ::android::hardware::hidl_string& imeisv, const ::android::hardware::hidl_string& esn, const ::android::hardware::hidl_string& meid) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDeviceIdentityResponse(info, imei, imeisv, esn, meid);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::exitEmergencyCallbackModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->exitEmergencyCallbackModeResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSmscAddressResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& smsc) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSmscAddressResponse(info, smsc);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSmscAddressResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSmscAddressResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::reportSmsMemoryStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->reportSmsMemoryStatusResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::reportStkServiceIsRunningResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->reportStkServiceIsRunningResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCdmaSubscriptionSourceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::CdmaSubscriptionSource source) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCdmaSubscriptionSourceResponse(info, source);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::requestIsimAuthenticationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& response) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->requestIsimAuthenticationResponse(info, response);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::acknowledgeIncomingGsmSmsWithPduResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->acknowledgeIncomingGsmSmsWithPduResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendEnvelopeWithStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& iccIo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendEnvelopeWithStatusResponse(info, iccIo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getVoiceRadioTechnologyResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::RadioTechnology rat) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getVoiceRadioTechnologyResponse(info, rat);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCellInfoListResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CellInfo>& cellInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCellInfoListResponse(info, cellInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCellInfoListRateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCellInfoListRateResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setInitialAttachApnResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setInitialAttachApnResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getImsRegistrationStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool isRegistered, ::android::hardware::radio::V1_0::RadioTechnologyFamily ratFamily) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getImsRegistrationStateResponse(info, isRegistered, ratFamily);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendImsSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendImsSmsResponse(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::iccTransmitApduBasicChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->iccTransmitApduBasicChannelResponse(info, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::iccOpenLogicalChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t channelId, const ::android::hardware::hidl_vec<int8_t>& selectResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->iccOpenLogicalChannelResponse(info, channelId, selectResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::iccCloseLogicalChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->iccCloseLogicalChannelResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::iccTransmitApduLogicalChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->iccTransmitApduLogicalChannelResponse(info, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::nvReadItemResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->nvReadItemResponse(info, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::nvWriteItemResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->nvWriteItemResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::nvWriteCdmaPrlResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->nvWriteCdmaPrlResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::nvResetConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->nvResetConfigResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setUiccSubscriptionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setUiccSubscriptionResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setDataAllowedResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setDataAllowedResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getHardwareConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::HardwareConfig>& config) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getHardwareConfigResponse(info, config);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::requestIccSimAuthenticationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& result) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->requestIccSimAuthenticationResponse(info, result);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setDataProfileResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setDataProfileResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::requestShutdownResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->requestShutdownResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getRadioCapabilityResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::RadioCapability& rc) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getRadioCapabilityResponse(info, rc);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setRadioCapabilityResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::RadioCapability& rc) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setRadioCapabilityResponse(info, rc);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::startLceServiceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LceStatusInfo& statusInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->startLceServiceResponse(info, statusInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::stopLceServiceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LceStatusInfo& statusInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->stopLceServiceResponse(info, statusInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::pullLceDataResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LceDataInfo& lceInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->pullLceDataResponse(info, lceInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getModemActivityInfoResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::ActivityStatsInfo& activityInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getModemActivityInfoResponse(info, activityInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setAllowedCarriersResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t numAllowed) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setAllowedCarriersResponse(info, numAllowed);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getAllowedCarriersResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool allAllowed, const ::android::hardware::radio::V1_0::CarrierRestrictions& carriers) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getAllowedCarriersResponse(info, allAllowed, carriers);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendDeviceStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendDeviceStateResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setIndicationFilterResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setIndicationFilterResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSimCardPowerResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSimCardPowerResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::acknowledgeRequest(int32_t serial) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->acknowledgeRequest(serial);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setCarrierInfoForImsiEncryptionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setCarrierInfoForImsiEncryptionResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSimCardPowerResponse_1_1(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSimCardPowerResponse_1_1(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::startNetworkScanResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->startNetworkScanResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::stopNetworkScanResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->stopNetworkScanResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::startKeepaliveResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_1::KeepaliveStatus& status) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->startKeepaliveResponse(info, status);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::stopKeepaliveResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->stopKeepaliveResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCellInfoListResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::CellInfo>& cellInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCellInfoListResponse_1_2(info, cellInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getIccCardStatusResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::CardStatus& cardStatus) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getIccCardStatusResponse_1_2(info, cardStatus);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSignalStrengthReportingCriteriaResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSignalStrengthReportingCriteriaResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setLinkCapacityReportingCriteriaResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setLinkCapacityReportingCriteriaResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCurrentCallsResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::Call>& calls) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCurrentCallsResponse_1_2(info, calls);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSignalStrengthResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::SignalStrength& signalStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSignalStrengthResponse_1_2(info, signalStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getVoiceRegistrationStateResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::VoiceRegStateResult& voiceRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getVoiceRegistrationStateResponse_1_2(info, voiceRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataRegistrationStateResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::DataRegStateResult& dataRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataRegistrationStateResponse_1_2(info, dataRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSystemSelectionChannelsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSystemSelectionChannelsResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::enableModemResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->enableModemResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getModemStackStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool isEnabled) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getModemStackStatusResponse(info, isEnabled);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::emergencyDialResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->emergencyDialResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::startNetworkScanResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->startNetworkScanResponse_1_4(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCellInfoListResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::CellInfo>& cellInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCellInfoListResponse_1_4(info, cellInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataRegistrationStateResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::DataRegStateResult& dataRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataRegistrationStateResponse_1_4(info, dataRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getIccCardStatusResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::CardStatus& cardStatus) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getIccCardStatusResponse_1_4(info, cardStatus);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getPreferredNetworkTypeBitmapResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getPreferredNetworkTypeBitmapResponse(info, networkTypeBitmap);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setPreferredNetworkTypeBitmapResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setPreferredNetworkTypeBitmapResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataCallListResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::SetupDataCallResult>& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataCallListResponse_1_4(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setupDataCallResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::SetupDataCallResult& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setupDataCallResponse_1_4(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setAllowedCarriersResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setAllowedCarriersResponse_1_4(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getAllowedCarriersResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::CarrierRestrictionsWithPriority& carriers, ::android::hardware::radio::V1_4::SimLockMultiSimPolicy multiSimPolicy) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getAllowedCarriersResponse_1_4(info, carriers, multiSimPolicy);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSignalStrengthResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::SignalStrength& signalStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSignalStrengthResponse_1_4(info, signalStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSignalStrengthReportingCriteriaResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSignalStrengthReportingCriteriaResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setLinkCapacityReportingCriteriaResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setLinkCapacityReportingCriteriaResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::enableUiccApplicationsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->enableUiccApplicationsResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::areUiccApplicationsEnabledResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enabled) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->areUiccApplicationsEnabledResponse(info, enabled);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSystemSelectionChannelsResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSystemSelectionChannelsResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::startNetworkScanResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->startNetworkScanResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setupDataCallResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::SetupDataCallResult& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setupDataCallResponse_1_5(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataCallListResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::SetupDataCallResult>& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataCallListResponse_1_5(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setInitialAttachApnResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setInitialAttachApnResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setDataProfileResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setDataProfileResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setRadioPowerResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setRadioPowerResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setIndicationFilterResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setIndicationFilterResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getBarringInfoResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::CellIdentity& cellIdentity, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::BarringInfo>& barringInfos) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getBarringInfoResponse(info, cellIdentity, barringInfos);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getVoiceRegistrationStateResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::RegStateResult& voiceRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getVoiceRegistrationStateResponse_1_5(info, voiceRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataRegistrationStateResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::RegStateResult& dataRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataRegistrationStateResponse_1_5(info, dataRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCellInfoListResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::CellInfo>& cellInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCellInfoListResponse_1_5(info, cellInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setNetworkSelectionModeManualResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setNetworkSelectionModeManualResponse_1_5(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendCdmaSmsExpectMoreResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendCdmaSmsExpectMoreResponse(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::supplySimDepersonalizationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_5::PersoSubstate persoType, int32_t remainingRetries) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->supplySimDepersonalizationResponse(info, persoType, remainingRetries);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getIccCardStatusResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::CardStatus& cardStatus) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getIccCardStatusResponse_1_5(info, cardStatus);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setRadioPowerResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setRadioPowerResponse_1_6(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setupDataCallResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::SetupDataCallResult& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setupDataCallResponse_1_6(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataCallListResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::SetupDataCallResult>& dcResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataCallListResponse_1_6(info, dcResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendSmsResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendSmsResponse_1_6(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendSmsExpectMoreResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendSmsExpectMoreResponse_1_6(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendCdmaSmsResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendCdmaSmsResponse_1_6(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::sendCdmaSmsExpectMoreResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->sendCdmaSmsExpectMoreResponse_1_6(info, sms);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setSimCardPowerResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setSimCardPowerResponse_1_6(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setNrDualConnectivityStateResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setNrDualConnectivityStateResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::isNrDualConnectivityEnabledResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, bool isEnabled) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->isNrDualConnectivityEnabledResponse(info, isEnabled);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::allocatePduSessionIdResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, int32_t id) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->allocatePduSessionIdResponse(info, id);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::releasePduSessionIdResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->releasePduSessionIdResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::startHandoverResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->startHandoverResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::cancelHandoverResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->cancelHandoverResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setAllowedNetworkTypesBitmapResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setAllowedNetworkTypesBitmapResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getAllowedNetworkTypesBitmapResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getAllowedNetworkTypesBitmapResponse(info, networkTypeBitmap);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::setDataThrottlingResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->setDataThrottlingResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSystemSelectionChannelsResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::RadioAccessSpecifier>& specifiers) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSystemSelectionChannelsResponse(info, specifiers);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCellInfoListResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::CellInfo>& cellInfo) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCellInfoListResponse_1_6(info, cellInfo);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSignalStrengthResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::SignalStrength& signalStrength) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSignalStrengthResponse_1_6(info, signalStrength);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getVoiceRegistrationStateResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::RegStateResult& voiceRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getVoiceRegistrationStateResponse_1_6(info, voiceRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getDataRegistrationStateResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::RegStateResult& dataRegResponse) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getDataRegistrationStateResponse_1_6(info, dataRegResponse);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getCurrentCallsResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::Call>& calls) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getCurrentCallsResponse_1_6(info, calls);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSlicingConfigResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::SlicingConfig& slicingConfig) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSlicingConfigResponse(info, slicingConfig);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSimPhonebookRecordsResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSimPhonebookRecordsResponse(info);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::getSimPhonebookCapacityResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::PhonebookCapacity& capacity) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->getSimPhonebookCapacityResponse(info, capacity);
+        }
+    }
+    return Void();
+}
+
+Return<void> RadioResponse_v1_6_Proxy::updateSimPhonebookRecordsResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, int32_t updatedRecordIndex) {
+    for (int32_t i = 0; i < MAX_SYS_NUM; i++) {
+        if (mRadioResponse[i] != nullptr) {
+            mRadioResponse[i]->updateSimPhonebookRecordsResponse(info, updatedRecordIndex);
+        }
+    }
+    return Void();
+}
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.h b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.h
new file mode 100755
index 0000000000..ac45354139
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/RadioResponse_V1_6_Proxy.h
@@ -0,0 +1,449 @@
+#pragma once
+
+#include <android/hardware/radio/1.6/IRadio.h>
+#include <android/hardware/radio/1.6/IRadioIndication.h>
+#include <android/hardware/radio/1.6/IRadioResponse.h>
+#include <android/hardware/radio/1.6/types.h>
+#include "proxy_common.h"
+
+using namespace ::android::hardware::radio::V1_6;
+using namespace ::android::hardware::radio::V1_5;
+using namespace ::android::hardware::radio::V1_4;
+using namespace ::android::hardware::radio::V1_3;
+using namespace ::android::hardware::radio::V1_2;
+using namespace ::android::hardware::radio::V1_1;
+using namespace ::android::hardware::radio::V1_0;
+
+using ::android::sp;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+
+class RadioResponse_v1_6_Proxy : public ::android::hardware::radio::V1_6::IRadioResponse {
+
+private:
+    sp<::android::hardware::radio::V1_6::IRadioResponse> mRadioResponse[MAX_SYS_NUM];
+
+public:
+    RadioResponse_v1_6_Proxy();
+
+    //static ::android::hardware::Return<::android::sp<::android::hardware::radio::V1_6::IRadioResponse>> castFrom(const ::android::sp<::android::hardware::radio::V1_0::IRadioResponse>& parent, bool emitError = false) {
+    //    return ::android::sp<::android::hardware::radio::V1_6::IRadioResponse>(static_cast<::android::hardware::radio::V1_6::IRadioResponse*>(parent.get()));
+    //}
+
+    int32_t setCallback(int sysId, sp<::android::hardware::radio::V1_6::IRadioResponse> radioResponse);
+
+    virtual ~RadioResponse_v1_6_Proxy() = default;
+
+    Return<void> getIccCardStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::CardStatus& cardStatus);
+
+    Return<void> supplyIccPinForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries);
+
+    Return<void> supplyIccPukForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries);
+
+    Return<void> supplyIccPin2ForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries);
+
+    Return<void> supplyIccPuk2ForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries);
+
+    Return<void> changeIccPinForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries);
+
+    Return<void> changeIccPin2ForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries);
+
+    Return<void> supplyNetworkDepersonalizationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t remainingRetries);
+
+    Return<void> getCurrentCallsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::Call>& calls);
+
+    Return<void> dialResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getIMSIForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& imsi);
+
+    Return<void> hangupConnectionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> hangupWaitingOrBackgroundResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> hangupForegroundResumeBackgroundResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> switchWaitingOrHoldingAndActiveResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> conferenceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> rejectCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getLastCallFailCauseResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LastCallFailCauseInfo& failCauseinfo);
+
+    Return<void> getSignalStrengthResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SignalStrength& sigStrength);
+
+    Return<void> getVoiceRegistrationStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::VoiceRegStateResult& voiceRegResponse);
+
+    Return<void> getDataRegistrationStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::DataRegStateResult& dataRegResponse);
+
+    Return<void> getOperatorResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& longName, const ::android::hardware::hidl_string& shortName, const ::android::hardware::hidl_string& numeric);
+
+    Return<void> setRadioPowerResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> sendDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> sendSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> sendSMSExpectMoreResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> setupDataCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SetupDataCallResult& dcResponse);
+
+    Return<void> iccIOForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& iccIo);
+
+    Return<void> sendUssdResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> cancelPendingUssdResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getClirResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t n, int32_t m);
+
+    Return<void> setClirResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCallForwardStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CallForwardInfo>& callForwardInfos);
+
+    Return<void> setCallForwardResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCallWaitingResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enable, int32_t serviceClass);
+
+    Return<void> setCallWaitingResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> acknowledgeLastIncomingGsmSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> acceptCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> deactivateDataCallResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getFacilityLockForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t response);
+
+    Return<void> setFacilityLockForAppResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t retry);
+
+    Return<void> setBarringPasswordResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getNetworkSelectionModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool manual);
+
+    Return<void> setNetworkSelectionModeAutomaticResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setNetworkSelectionModeManualResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getAvailableNetworksResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::OperatorInfo>& networkInfos);
+
+    Return<void> startDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> stopDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getBasebandVersionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& version);
+
+    Return<void> separateConnectionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setMuteResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getMuteResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enable);
+
+    Return<void> getClipResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::ClipStatus status);
+
+    Return<void> getDataCallListResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::SetupDataCallResult>& dcResponse);
+
+    Return<void> setSuppServiceNotificationsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> writeSmsToSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t index);
+
+    Return<void> deleteSmsOnSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setBandModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getAvailableBandModesResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::RadioBandMode>& bandModes);
+
+    Return<void> sendEnvelopeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& commandResponse);
+
+    Return<void> sendTerminalResponseToSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> handleStkCallSetupRequestFromSimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> explicitCallTransferResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setPreferredNetworkTypeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getPreferredNetworkTypeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::PreferredNetworkType nwType);
+
+    Return<void> getNeighboringCidsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::NeighboringCell>& cells);
+
+    Return<void> setLocationUpdatesResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setCdmaSubscriptionSourceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setCdmaRoamingPreferenceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCdmaRoamingPreferenceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::CdmaRoamingType type);
+
+    Return<void> setTTYModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getTTYModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::TtyMode mode);
+
+    Return<void> setPreferredVoicePrivacyResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getPreferredVoicePrivacyResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enable);
+
+    Return<void> sendCDMAFeatureCodeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> sendBurstDtmfResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> sendCdmaSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> acknowledgeLastIncomingCdmaSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getGsmBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::GsmBroadcastSmsConfigInfo>& configs);
+
+    Return<void> setGsmBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setGsmBroadcastActivationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCdmaBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CdmaBroadcastSmsConfigInfo>& configs);
+
+    Return<void> setCdmaBroadcastConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setCdmaBroadcastActivationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCDMASubscriptionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& mdn, const ::android::hardware::hidl_string& hSid, const ::android::hardware::hidl_string& hNid, const ::android::hardware::hidl_string& min, const ::android::hardware::hidl_string& prl);
+
+    Return<void> writeSmsToRuimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, uint32_t index);
+
+    Return<void> deleteSmsOnRuimResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getDeviceIdentityResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& imei, const ::android::hardware::hidl_string& imeisv, const ::android::hardware::hidl_string& esn, const ::android::hardware::hidl_string& meid);
+
+    Return<void> exitEmergencyCallbackModeResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getSmscAddressResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& smsc);
+
+    Return<void> setSmscAddressResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> reportSmsMemoryStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> reportStkServiceIsRunningResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCdmaSubscriptionSourceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::CdmaSubscriptionSource source);
+
+    Return<void> requestIsimAuthenticationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& response);
+
+    Return<void> acknowledgeIncomingGsmSmsWithPduResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> sendEnvelopeWithStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& iccIo);
+
+    Return<void> getVoiceRadioTechnologyResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_0::RadioTechnology rat);
+
+    Return<void> getCellInfoListResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CellInfo>& cellInfo);
+
+    Return<void> setCellInfoListRateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setInitialAttachApnResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getImsRegistrationStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool isRegistered, ::android::hardware::radio::V1_0::RadioTechnologyFamily ratFamily);
+
+    Return<void> sendImsSmsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> iccTransmitApduBasicChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& result);
+
+    Return<void> iccOpenLogicalChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t channelId, const ::android::hardware::hidl_vec<int8_t>& selectResponse);
+
+    Return<void> iccCloseLogicalChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> iccTransmitApduLogicalChannelResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& result);
+
+    Return<void> nvReadItemResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_string& result);
+
+    Return<void> nvWriteItemResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> nvWriteCdmaPrlResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> nvResetConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setUiccSubscriptionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setDataAllowedResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getHardwareConfigResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::HardwareConfig>& config);
+
+    Return<void> requestIccSimAuthenticationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::IccIoResult& result);
+
+    Return<void> setDataProfileResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> requestShutdownResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getRadioCapabilityResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::RadioCapability& rc);
+
+    Return<void> setRadioCapabilityResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::RadioCapability& rc);
+
+    Return<void> startLceServiceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LceStatusInfo& statusInfo);
+
+    Return<void> stopLceServiceResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LceStatusInfo& statusInfo);
+
+    Return<void> pullLceDataResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::LceDataInfo& lceInfo);
+
+    Return<void> getModemActivityInfoResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::ActivityStatsInfo& activityInfo);
+
+    Return<void> setAllowedCarriersResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, int32_t numAllowed);
+
+    Return<void> getAllowedCarriersResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool allAllowed, const ::android::hardware::radio::V1_0::CarrierRestrictions& carriers);
+
+    Return<void> sendDeviceStateResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setIndicationFilterResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setSimCardPowerResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> acknowledgeRequest(int32_t serial);
+
+    Return<void> setCarrierInfoForImsiEncryptionResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setSimCardPowerResponse_1_1(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> startNetworkScanResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> stopNetworkScanResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> startKeepaliveResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_1::KeepaliveStatus& status);
+
+    Return<void> stopKeepaliveResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCellInfoListResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::CellInfo>& cellInfo);
+
+    Return<void> getIccCardStatusResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::CardStatus& cardStatus);
+
+    Return<void> setSignalStrengthReportingCriteriaResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setLinkCapacityReportingCriteriaResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCurrentCallsResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_2::Call>& calls);
+
+    Return<void> getSignalStrengthResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::SignalStrength& signalStrength);
+
+    Return<void> getVoiceRegistrationStateResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::VoiceRegStateResult& voiceRegResponse);
+
+    Return<void> getDataRegistrationStateResponse_1_2(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_2::DataRegStateResult& dataRegResponse);
+
+    Return<void> setSystemSelectionChannelsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> enableModemResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getModemStackStatusResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool isEnabled);
+
+    Return<void> emergencyDialResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> startNetworkScanResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getCellInfoListResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::CellInfo>& cellInfo);
+
+    Return<void> getDataRegistrationStateResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::DataRegStateResult& dataRegResponse);
+
+    Return<void> getIccCardStatusResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::CardStatus& cardStatus);
+
+    Return<void> getPreferredNetworkTypeBitmapResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap);
+
+    Return<void> setPreferredNetworkTypeBitmapResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getDataCallListResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::SetupDataCallResult>& dcResponse);
+
+    Return<void> setupDataCallResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::SetupDataCallResult& dcResponse);
+
+    Return<void> setAllowedCarriersResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getAllowedCarriersResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::CarrierRestrictionsWithPriority& carriers, ::android::hardware::radio::V1_4::SimLockMultiSimPolicy multiSimPolicy);
+
+    Return<void> getSignalStrengthResponse_1_4(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_4::SignalStrength& signalStrength);
+
+    Return<void> setSignalStrengthReportingCriteriaResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setLinkCapacityReportingCriteriaResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> enableUiccApplicationsResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> areUiccApplicationsEnabledResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, bool enabled);
+
+    Return<void> setSystemSelectionChannelsResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> startNetworkScanResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setupDataCallResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::SetupDataCallResult& dcResponse);
+
+    Return<void> getDataCallListResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::SetupDataCallResult>& dcResponse);
+
+    Return<void> setInitialAttachApnResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setDataProfileResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setRadioPowerResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> setIndicationFilterResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> getBarringInfoResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::CellIdentity& cellIdentity, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::BarringInfo>& barringInfos);
+
+    Return<void> getVoiceRegistrationStateResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::RegStateResult& voiceRegResponse);
+
+    Return<void> getDataRegistrationStateResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::RegStateResult& dataRegResponse);
+
+    Return<void> getCellInfoListResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::CellInfo>& cellInfo);
+
+    Return<void> setNetworkSelectionModeManualResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info);
+
+    Return<void> sendCdmaSmsExpectMoreResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> supplySimDepersonalizationResponse(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, ::android::hardware::radio::V1_5::PersoSubstate persoType, int32_t remainingRetries);
+
+    Return<void> getIccCardStatusResponse_1_5(const ::android::hardware::radio::V1_0::RadioResponseInfo& info, const ::android::hardware::radio::V1_5::CardStatus& cardStatus);
+
+    Return<void> setRadioPowerResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> setupDataCallResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::SetupDataCallResult& dcResponse);
+
+    Return<void> getDataCallListResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::SetupDataCallResult>& dcResponse);
+
+    Return<void> sendSmsResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> sendSmsExpectMoreResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> sendCdmaSmsResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> sendCdmaSmsExpectMoreResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_0::SendSmsResult& sms);
+
+    Return<void> setSimCardPowerResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> setNrDualConnectivityStateResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> isNrDualConnectivityEnabledResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, bool isEnabled);
+
+    Return<void> allocatePduSessionIdResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, int32_t id);
+
+    Return<void> releasePduSessionIdResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> startHandoverResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> cancelHandoverResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> setAllowedNetworkTypesBitmapResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> getAllowedNetworkTypesBitmapResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap);
+
+    Return<void> setDataThrottlingResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> getSystemSelectionChannelsResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::RadioAccessSpecifier>& specifiers);
+
+    Return<void> getCellInfoListResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::CellInfo>& cellInfo);
+
+    Return<void> getSignalStrengthResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::SignalStrength& signalStrength);
+
+    Return<void> getVoiceRegistrationStateResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::RegStateResult& voiceRegResponse);
+
+    Return<void> getDataRegistrationStateResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::RegStateResult& dataRegResponse);
+
+    Return<void> getCurrentCallsResponse_1_6(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_6::Call>& calls);
+
+    Return<void> getSlicingConfigResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::SlicingConfig& slicingConfig);
+
+    Return<void> getSimPhonebookRecordsResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info);
+
+    Return<void> getSimPhonebookCapacityResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, const ::android::hardware::radio::V1_6::PhonebookCapacity& capacity);
+
+    Return<void> updateSimPhonebookRecordsResponse(const ::android::hardware::radio::V1_6::RadioResponseInfo& info, int32_t updatedRecordIndex);
+
+};
\ No newline at end of file
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/proxy_common.h b/hardware/interfaces/radio/1.6/radio_hal_proxy/proxy_common.h
new file mode 100755
index 0000000000..dd4e450ea9
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/proxy_common.h
@@ -0,0 +1,3 @@
+#pragma once
+
+#define MAX_SYS_NUM 3
\ No newline at end of file
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/radio_hidl_hal_proxy.cpp b/hardware/interfaces/radio/1.6/radio_hal_proxy/radio_hidl_hal_proxy.cpp
new file mode 100755
index 0000000000..1f71d7280e
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/radio_hidl_hal_proxy.cpp
@@ -0,0 +1,152 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#define LOG_TAG "RADIO_HAL_PROXY"
+#include <log/log.h>
+#include <hidl/HidlTransportSupport.h>
+#include "RadioResponse_V1_6_Proxy.h"
+#include "RadioIndication_V1_6_Proxy.h"
+#include "ril_service_1_6_proxy.h"
+
+using namespace ::android::hardware::radio::V1_6;
+using namespace ::android::hardware::radio::V1_5;
+using namespace ::android::hardware::radio::V1_4;
+using namespace ::android::hardware::radio::V1_3;
+using namespace ::android::hardware::radio::V1_2;
+using namespace ::android::hardware::radio::V1_1;
+using namespace ::android::hardware::radio::V1_0;
+
+using ::android::sp;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+
+#define SIM_COUNT 2
+
+int main(int argc, char **argv) {
+    android::status_t status;
+    sp<::android::hardware::radio::V1_6::IRadio> radio_v1_6 = nullptr;
+    int32_t slot = 0;
+    const char *serviceNames[] = {
+        "slot1"
+        #if (SIM_COUNT >= 2)
+        , "slot2"
+        #if (SIM_COUNT >= 3)
+        , "slot3"
+        #if (SIM_COUNT >= 4)
+        , "slot4"
+        #endif
+        #endif
+        #endif
+    };
+    const char *proxyServiceNames[] = {
+            "slot1_proxy"
+            #if (SIM_COUNT >= 2)
+            , "slot2_proxy"
+            #if (SIM_COUNT >= 3)
+            , "slot3_proxy"
+            #if (SIM_COUNT >= 4)
+            , "slot4_proxy"
+            #endif
+            #endif
+            #endif
+        };
+
+
+    if (argc < 2) {
+        return -1;
+    }
+
+    slot = atoi(argv[1]);
+    RLOGD("slot = %d\n", slot);
+    if (argc >= 3) {
+        //test
+        radio_v1_6 = android::hardware::radio::V1_6::IRadio::getService(proxyServiceNames[slot]);
+        if (radio_v1_6 == nullptr) {
+            RLOGD("RIL_Proxy_Init radio_v1_6(%s) is null \n", proxyServiceNames[slot]);
+            return 0;
+        }
+
+        int32_t serial = 0x55AA55AA;
+        ::android::hardware::radio::V1_5::AccessNetwork accessNetwork =
+                ::android::hardware::radio::V1_5::AccessNetwork::EUTRAN;
+
+        android::hardware::radio::V1_5::DataProfileInfo dataProfileInfo;
+        memset(&dataProfileInfo, 0, sizeof(dataProfileInfo));
+        dataProfileInfo.profileId = DataProfileId::DEFAULT;
+        dataProfileInfo.apn = hidl_string("internet");
+        dataProfileInfo.protocol = PdpProtocolType::IP;
+        dataProfileInfo.roamingProtocol = PdpProtocolType::IP;
+        dataProfileInfo.authType = ApnAuthType::NO_PAP_NO_CHAP;
+        dataProfileInfo.user = hidl_string("username");
+        dataProfileInfo.password = hidl_string("password");
+        dataProfileInfo.type = DataProfileInfoType::THREE_GPP;
+        dataProfileInfo.maxConnsTime = 300;
+        dataProfileInfo.maxConns = 20;
+        dataProfileInfo.waitTime = 0;
+        dataProfileInfo.enabled = true;
+        dataProfileInfo.supportedApnTypesBitmap = 320;
+        dataProfileInfo.bearerBitmap = 161543;
+        dataProfileInfo.mtuV4 = 0;
+        dataProfileInfo.mtuV6 = 0;
+        dataProfileInfo.preferred = true;
+        dataProfileInfo.persistent = false;
+
+        bool roamingAllowed = false;
+
+        std::vector<::android::hardware::radio::V1_5::LinkAddress> addresses = {};
+        std::vector<hidl_string> dnses = {};
+
+        ::android::hardware::radio::V1_2::DataRequestReason reason =
+                ::android::hardware::radio::V1_2::DataRequestReason::NORMAL;
+
+        ::android::hardware::radio::V1_6::OptionalSliceInfo optionalSliceInfo;
+        memset(&optionalSliceInfo, 0, sizeof(optionalSliceInfo));
+
+        ::android::hardware::radio::V1_6::OptionalTrafficDescriptor optionalTrafficDescriptor;
+        memset(&optionalTrafficDescriptor, 0, sizeof(optionalTrafficDescriptor));
+
+        bool matchAllRuleAllowed = true;
+
+        radio_v1_6->setupDataCall_1_6(serial, accessNetwork, dataProfileInfo, roamingAllowed,
+                                          reason, addresses, dnses, -1, optionalSliceInfo,
+                                          optionalTrafficDescriptor, matchAllRuleAllowed);
+        RLOGD("RIL_Proxy_Init radio_v1_6(%s) setupDataCall_1_6 after\n", proxyServiceNames[slot]);
+
+        return 0;
+    }
+
+    android::hardware::configureRpcThreadpool(2, true /* callerWillJoin */);
+
+    radio_v1_6 = android::hardware::radio::V1_6::IRadio::getService(serviceNames[slot]);
+    if (radio_v1_6 == nullptr) {
+        RLOGD("RIL_Proxy_Init radio_v1_6 is null \n");
+    }
+
+    sp<RadioImpl_1_6_Proxy> radioImpl_1_6_Proxy = new (std::nothrow) RadioImpl_1_6_Proxy(slot, radio_v1_6);
+    if (radioImpl_1_6_Proxy == nullptr) {
+        RLOGD("RIL_Proxy_Init radioImpl_1_6_Proxy is null \n");
+    }
+
+    status = radioImpl_1_6_Proxy->registerAsService(proxyServiceNames[slot]);
+
+    RLOGD("RIL_Proxy_Init starting sleep loop");
+    while (true) {
+        sleep(UINT32_MAX);
+    }
+
+    return 0;
+}
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.cpp b/hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.cpp
new file mode 100755
index 0000000000..c4dc7c8fdb
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.cpp
@@ -0,0 +1,1078 @@
+
+#include "ril_service_1_6_proxy.h"
+
+::android::status_t RadioImpl_1_6_Proxy::registerAsService(const std::string &serviceName) {
+    return ::android::hardware::radio::V1_6::IRadio::registerAsService(serviceName);
+}
+
+//::android::hardware::Return<::android::sp<::android::hardware::radio::V1_6::IRadioResponse>> RadioImpl_1_6_Proxy::castFrom(const ::android::sp<::android::hardware::radio::V1_0::IRadioResponse>& parent, bool /* emitError */) {
+//    return (::android::sp<::android::hardware::radio::V1_6::IRadioResponse>)parent;
+//}
+
+void RadioImpl_1_6_Proxy::serviceDied(uint64_t cookie,
+        const ::android::wp<::android::hidl::base::V1_0::IBase>& who) {
+    int32_t sysId = cookie;
+    (void)who;
+    RLOGD("RadioImpl_1_6_Proxy::serviceDied: Client %d died. Cleaning up callbacks", sysId);
+    mRadioResponseV1_6->setCallback(sysId, nullptr);
+    mRadioIndicationV1_6->setCallback(sysId, nullptr);
+}
+
+Return<void> RadioImpl_1_6_Proxy::setResponseFunctions(const ::android::sp<::android::hardware::radio::V1_0::IRadioResponse>& radioResponse, const ::android::sp<::android::hardware::radio::V1_0::IRadioIndication>& radioIndication) {
+    int sysId = 0;
+
+    ::android::sp<::android::hardware::radio::V1_6::IRadioResponse> tmpResponse =::android::hardware::radio::V1_6::IRadioResponse::castFrom(radioResponse)
+                             .withDefault(nullptr);
+    ::android::sp<::android::hardware::radio::V1_6::IRadioIndication> tmpIndication = ::android::hardware::radio::V1_6::IRadioIndication::castFrom(radioIndication)
+                             .withDefault(nullptr);
+    if (nullptr != tmpResponse && nullptr != tmpIndication) {
+        sysId = mRadioResponseV1_6->setCallback(-1, tmpResponse);
+        mRadioIndicationV1_6->setCallback(-1, tmpIndication);
+        RLOGD("setCallback to free_slot %d\n", sysId);
+        tmpResponse->linkToDeath(this, sysId);
+        mRealService->setResponseFunctions(mRadioResponseV1_6, mRadioIndicationV1_6);
+    }
+
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getIccCardStatus(int32_t serial) {
+    mRealService->getIccCardStatus(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::supplyIccPinForApp(int32_t serial, const ::android::hardware::hidl_string& pin, const ::android::hardware::hidl_string& aid) {
+    mRealService->supplyIccPinForApp(serial, pin, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::supplyIccPukForApp(int32_t serial, const ::android::hardware::hidl_string& puk, const ::android::hardware::hidl_string& pin, const ::android::hardware::hidl_string& aid) {
+    mRealService->supplyIccPukForApp(serial, puk, pin, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::supplyIccPin2ForApp(int32_t serial, const ::android::hardware::hidl_string& pin2, const ::android::hardware::hidl_string& aid) {
+    mRealService->supplyIccPin2ForApp(serial, pin2, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::supplyIccPuk2ForApp(int32_t serial, const ::android::hardware::hidl_string& puk2, const ::android::hardware::hidl_string& pin2, const ::android::hardware::hidl_string& aid) {
+    mRealService->supplyIccPuk2ForApp(serial, puk2, pin2, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::changeIccPinForApp(int32_t serial, const ::android::hardware::hidl_string& oldPin, const ::android::hardware::hidl_string& newPin, const ::android::hardware::hidl_string& aid) {
+    mRealService->changeIccPinForApp(serial, oldPin, newPin, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::changeIccPin2ForApp(int32_t serial, const ::android::hardware::hidl_string& oldPin2, const ::android::hardware::hidl_string& newPin2, const ::android::hardware::hidl_string& aid) {
+    mRealService->changeIccPin2ForApp(serial, oldPin2, newPin2, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::supplyNetworkDepersonalization(int32_t serial, const ::android::hardware::hidl_string& netPin) {
+    mRealService->supplyNetworkDepersonalization(serial, netPin);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCurrentCalls(int32_t serial) {
+    mRealService->getCurrentCalls(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::dial(int32_t serial, const ::android::hardware::radio::V1_0::Dial& dialInfo) {
+    mRealService->dial(serial, dialInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getImsiForApp(int32_t serial, const ::android::hardware::hidl_string& aid) {
+    mRealService->getImsiForApp(serial, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::hangup(int32_t serial, int32_t gsmIndex) {
+    mRealService->hangup(serial, gsmIndex);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::hangupWaitingOrBackground(int32_t serial) {
+    mRealService->hangupWaitingOrBackground(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::hangupForegroundResumeBackground(int32_t serial) {
+    mRealService->hangupForegroundResumeBackground(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::switchWaitingOrHoldingAndActive(int32_t serial) {
+    mRealService->switchWaitingOrHoldingAndActive(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::conference(int32_t serial) {
+    mRealService->conference(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::rejectCall(int32_t serial) {
+    mRealService->rejectCall(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getLastCallFailCause(int32_t serial) {
+    mRealService->getLastCallFailCause(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSignalStrength(int32_t serial) {
+    mRealService->getSignalStrength(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getVoiceRegistrationState(int32_t serial) {
+    mRealService->getVoiceRegistrationState(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getDataRegistrationState(int32_t serial) {
+    mRealService->getDataRegistrationState(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getOperator(int32_t serial) {
+    mRealService->getOperator(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setRadioPower(int32_t serial, bool on) {
+    mRealService->setRadioPower(serial, on);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendDtmf(int32_t serial, const ::android::hardware::hidl_string& s) {
+    mRealService->sendDtmf(serial, s);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendSms(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message) {
+    mRealService->sendSms(serial, message);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendSMSExpectMore(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message) {
+    mRealService->sendSMSExpectMore(serial, message);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setupDataCall(int32_t serial, ::android::hardware::radio::V1_0::RadioTechnology radioTechnology, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool roamingAllowed, bool isRoaming) {
+    mRealService->setupDataCall(serial, radioTechnology, dataProfileInfo, modemCognitive, roamingAllowed, isRoaming);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::iccIOForApp(int32_t serial, const ::android::hardware::radio::V1_0::IccIo& iccIo) {
+    mRealService->iccIOForApp(serial, iccIo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendUssd(int32_t serial, const ::android::hardware::hidl_string& ussd) {
+    mRealService->sendUssd(serial, ussd);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::cancelPendingUssd(int32_t serial) {
+    mRealService->cancelPendingUssd(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getClir(int32_t serial) {
+    mRealService->getClir(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setClir(int32_t serial, int32_t status) {
+    mRealService->setClir(serial, status);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCallForwardStatus(int32_t serial, const ::android::hardware::radio::V1_0::CallForwardInfo& callInfo) {
+    mRealService->getCallForwardStatus(serial, callInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCallForward(int32_t serial, const ::android::hardware::radio::V1_0::CallForwardInfo& callInfo) {
+    mRealService->setCallForward(serial, callInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCallWaiting(int32_t serial, int32_t serviceClass) {
+    mRealService->getCallWaiting(serial, serviceClass);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCallWaiting(int32_t serial, bool enable, int32_t serviceClass) {
+    mRealService->setCallWaiting(serial, enable, serviceClass);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::acknowledgeLastIncomingGsmSms(int32_t serial, bool success, ::android::hardware::radio::V1_0::SmsAcknowledgeFailCause cause) {
+    mRealService->acknowledgeLastIncomingGsmSms(serial, success, cause);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::acceptCall(int32_t serial) {
+    mRealService->acceptCall(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::deactivateDataCall(int32_t serial, int32_t cid, bool reasonRadioShutDown) {
+    mRealService->deactivateDataCall(serial, cid, reasonRadioShutDown);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getFacilityLockForApp(int32_t serial, const ::android::hardware::hidl_string& facility, const ::android::hardware::hidl_string& password, int32_t serviceClass, const ::android::hardware::hidl_string& appId) {
+    mRealService->getFacilityLockForApp(serial, facility, password, serviceClass, appId);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setFacilityLockForApp(int32_t serial, const ::android::hardware::hidl_string& facility, bool lockState, const ::android::hardware::hidl_string& password, int32_t serviceClass, const ::android::hardware::hidl_string& appId) {
+    mRealService->setFacilityLockForApp(serial, facility, lockState, password, serviceClass, appId);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setBarringPassword(int32_t serial, const ::android::hardware::hidl_string& facility, const ::android::hardware::hidl_string& oldPassword, const ::android::hardware::hidl_string& newPassword) {
+    mRealService->setBarringPassword(serial, facility, oldPassword, newPassword);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getNetworkSelectionMode(int32_t serial) {
+    mRealService->getNetworkSelectionMode(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setNetworkSelectionModeAutomatic(int32_t serial) {
+    mRealService->setNetworkSelectionModeAutomatic(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setNetworkSelectionModeManual(int32_t serial, const ::android::hardware::hidl_string& operatorNumeric) {
+    mRealService->setNetworkSelectionModeManual(serial, operatorNumeric);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getAvailableNetworks(int32_t serial) {
+    mRealService->getAvailableNetworks(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startDtmf(int32_t serial, const ::android::hardware::hidl_string& s) {
+    mRealService->startDtmf(serial, s);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::stopDtmf(int32_t serial) {
+    mRealService->stopDtmf(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getBasebandVersion(int32_t serial) {
+    mRealService->getBasebandVersion(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::separateConnection(int32_t serial, int32_t gsmIndex) {
+    mRealService->separateConnection(serial, gsmIndex);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setMute(int32_t serial, bool enable) {
+    mRealService->setMute(serial, enable);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getMute(int32_t serial) {
+    mRealService->getMute(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getClip(int32_t serial) {
+    mRealService->getClip(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getDataCallList(int32_t serial) {
+    mRealService->getDataCallList(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSuppServiceNotifications(int32_t serial, bool enable) {
+    mRealService->setSuppServiceNotifications(serial, enable);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::writeSmsToSim(int32_t serial, const ::android::hardware::radio::V1_0::SmsWriteArgs& smsWriteArgs) {
+    mRealService->writeSmsToSim(serial, smsWriteArgs);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::deleteSmsOnSim(int32_t serial, int32_t index) {
+    mRealService->deleteSmsOnSim(serial, index);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setBandMode(int32_t serial, ::android::hardware::radio::V1_0::RadioBandMode mode) {
+    mRealService->setBandMode(serial, mode);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getAvailableBandModes(int32_t serial) {
+    mRealService->getAvailableBandModes(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendEnvelope(int32_t serial, const ::android::hardware::hidl_string& command) {
+    mRealService->sendEnvelope(serial, command);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendTerminalResponseToSim(int32_t serial, const ::android::hardware::hidl_string& commandResponse) {
+    mRealService->sendTerminalResponseToSim(serial, commandResponse);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::handleStkCallSetupRequestFromSim(int32_t serial, bool accept) {
+    mRealService->handleStkCallSetupRequestFromSim(serial, accept);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::explicitCallTransfer(int32_t serial) {
+    mRealService->explicitCallTransfer(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setPreferredNetworkType(int32_t serial, ::android::hardware::radio::V1_0::PreferredNetworkType nwType) {
+    mRealService->setPreferredNetworkType(serial, nwType);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getPreferredNetworkType(int32_t serial) {
+    mRealService->getPreferredNetworkType(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getNeighboringCids(int32_t serial) {
+    mRealService->getNeighboringCids(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setLocationUpdates(int32_t serial, bool enable) {
+    mRealService->setLocationUpdates(serial, enable);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCdmaSubscriptionSource(int32_t serial, ::android::hardware::radio::V1_0::CdmaSubscriptionSource cdmaSub) {
+    mRealService->setCdmaSubscriptionSource(serial, cdmaSub);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCdmaRoamingPreference(int32_t serial, ::android::hardware::radio::V1_0::CdmaRoamingType type) {
+    mRealService->setCdmaRoamingPreference(serial, type);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCdmaRoamingPreference(int32_t serial) {
+    mRealService->getCdmaRoamingPreference(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setTTYMode(int32_t serial, ::android::hardware::radio::V1_0::TtyMode mode) {
+    mRealService->setTTYMode(serial, mode);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getTTYMode(int32_t serial) {
+    mRealService->getTTYMode(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setPreferredVoicePrivacy(int32_t serial, bool enable) {
+    mRealService->setPreferredVoicePrivacy(serial, enable);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getPreferredVoicePrivacy(int32_t serial) {
+    mRealService->getPreferredVoicePrivacy(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendCDMAFeatureCode(int32_t serial, const ::android::hardware::hidl_string& featureCode) {
+    mRealService->sendCDMAFeatureCode(serial, featureCode);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendBurstDtmf(int32_t serial, const ::android::hardware::hidl_string& dtmf, int32_t on, int32_t off) {
+    mRealService->sendBurstDtmf(serial, dtmf, on, off);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendCdmaSms(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms) {
+    mRealService->sendCdmaSms(serial, sms);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::acknowledgeLastIncomingCdmaSms(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsAck& smsAck) {
+    mRealService->acknowledgeLastIncomingCdmaSms(serial, smsAck);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getGsmBroadcastConfig(int32_t serial) {
+    mRealService->getGsmBroadcastConfig(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setGsmBroadcastConfig(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::GsmBroadcastSmsConfigInfo>& configInfo) {
+    mRealService->setGsmBroadcastConfig(serial, configInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setGsmBroadcastActivation(int32_t serial, bool activate) {
+    mRealService->setGsmBroadcastActivation(serial, activate);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCdmaBroadcastConfig(int32_t serial) {
+    mRealService->getCdmaBroadcastConfig(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCdmaBroadcastConfig(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CdmaBroadcastSmsConfigInfo>& configInfo) {
+    mRealService->setCdmaBroadcastConfig(serial, configInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCdmaBroadcastActivation(int32_t serial, bool activate) {
+    mRealService->setCdmaBroadcastActivation(serial, activate);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCDMASubscription(int32_t serial) {
+    mRealService->getCDMASubscription(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::writeSmsToRuim(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsWriteArgs& cdmaSms) {
+    mRealService->writeSmsToRuim(serial, cdmaSms);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::deleteSmsOnRuim(int32_t serial, int32_t index) {
+    mRealService->deleteSmsOnRuim(serial, index);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getDeviceIdentity(int32_t serial) {
+    mRealService->getDeviceIdentity(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::exitEmergencyCallbackMode(int32_t serial) {
+    mRealService->exitEmergencyCallbackMode(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSmscAddress(int32_t serial) {
+    mRealService->getSmscAddress(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSmscAddress(int32_t serial, const ::android::hardware::hidl_string& smsc) {
+    mRealService->setSmscAddress(serial, smsc);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::reportSmsMemoryStatus(int32_t serial, bool available) {
+    mRealService->reportSmsMemoryStatus(serial, available);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::reportStkServiceIsRunning(int32_t serial) {
+    mRealService->reportStkServiceIsRunning(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCdmaSubscriptionSource(int32_t serial) {
+    mRealService->getCdmaSubscriptionSource(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::requestIsimAuthentication(int32_t serial, const ::android::hardware::hidl_string& challenge) {
+    mRealService->requestIsimAuthentication(serial, challenge);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::acknowledgeIncomingGsmSmsWithPdu(int32_t serial, bool success, const ::android::hardware::hidl_string& ackPdu) {
+    mRealService->acknowledgeIncomingGsmSmsWithPdu(serial, success, ackPdu);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendEnvelopeWithStatus(int32_t serial, const ::android::hardware::hidl_string& contents) {
+    mRealService->sendEnvelopeWithStatus(serial, contents);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getVoiceRadioTechnology(int32_t serial) {
+    mRealService->getVoiceRadioTechnology(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCellInfoList(int32_t serial) {
+    mRealService->getCellInfoList(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCellInfoListRate(int32_t serial, int32_t rate) {
+    mRealService->setCellInfoListRate(serial, rate);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setInitialAttachApn(int32_t serial, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool isRoaming) {
+    mRealService->setInitialAttachApn(serial, dataProfileInfo, modemCognitive, isRoaming);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getImsRegistrationState(int32_t serial) {
+    mRealService->getImsRegistrationState(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendImsSms(int32_t serial, const ::android::hardware::radio::V1_0::ImsSmsMessage& message) {
+    mRealService->sendImsSms(serial, message);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::iccTransmitApduBasicChannel(int32_t serial, const ::android::hardware::radio::V1_0::SimApdu& message) {
+    mRealService->iccTransmitApduBasicChannel(serial, message);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::iccOpenLogicalChannel(int32_t serial, const ::android::hardware::hidl_string& aid, int32_t p2) {
+    mRealService->iccOpenLogicalChannel(serial, aid, p2);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::iccCloseLogicalChannel(int32_t serial, int32_t channelId) {
+    mRealService->iccCloseLogicalChannel(serial, channelId);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::iccTransmitApduLogicalChannel(int32_t serial, const ::android::hardware::radio::V1_0::SimApdu& message) {
+    mRealService->iccTransmitApduLogicalChannel(serial, message);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::nvReadItem(int32_t serial, ::android::hardware::radio::V1_0::NvItem itemId) {
+    mRealService->nvReadItem(serial, itemId);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::nvWriteItem(int32_t serial, const ::android::hardware::radio::V1_0::NvWriteItem& item) {
+    mRealService->nvWriteItem(serial, item);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::nvWriteCdmaPrl(int32_t serial, const ::android::hardware::hidl_vec<uint8_t>& prl) {
+    mRealService->nvWriteCdmaPrl(serial, prl);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::nvResetConfig(int32_t serial, ::android::hardware::radio::V1_0::ResetNvType resetType) {
+    mRealService->nvResetConfig(serial, resetType);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setUiccSubscription(int32_t serial, const ::android::hardware::radio::V1_0::SelectUiccSub& uiccSub) {
+    mRealService->setUiccSubscription(serial, uiccSub);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setDataAllowed(int32_t serial, bool allow) {
+    mRealService->setDataAllowed(serial, allow);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getHardwareConfig(int32_t serial) {
+    mRealService->getHardwareConfig(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::requestIccSimAuthentication(int32_t serial, int32_t authContext, const ::android::hardware::hidl_string& authData, const ::android::hardware::hidl_string& aid) {
+    mRealService->requestIccSimAuthentication(serial, authContext, authData, aid);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setDataProfile(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::DataProfileInfo>& profiles, bool isRoaming) {
+    mRealService->setDataProfile(serial, profiles, isRoaming);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::requestShutdown(int32_t serial) {
+    mRealService->requestShutdown(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getRadioCapability(int32_t serial) {
+    mRealService->getRadioCapability(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setRadioCapability(int32_t serial, const ::android::hardware::radio::V1_0::RadioCapability& rc) {
+    mRealService->setRadioCapability(serial, rc);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startLceService(int32_t serial, int32_t reportInterval, bool pullMode) {
+    mRealService->startLceService(serial, reportInterval, pullMode);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::stopLceService(int32_t serial) {
+    mRealService->stopLceService(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::pullLceData(int32_t serial) {
+    mRealService->pullLceData(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getModemActivityInfo(int32_t serial) {
+    mRealService->getModemActivityInfo(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setAllowedCarriers(int32_t serial, bool allAllowed, const ::android::hardware::radio::V1_0::CarrierRestrictions& carriers) {
+    mRealService->setAllowedCarriers(serial, allAllowed, carriers);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getAllowedCarriers(int32_t serial) {
+    mRealService->getAllowedCarriers(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendDeviceState(int32_t serial, ::android::hardware::radio::V1_0::DeviceStateType deviceStateType, bool state) {
+    mRealService->sendDeviceState(serial, deviceStateType, state);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setIndicationFilter(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_0::IndicationFilter> indicationFilter) {
+    mRealService->setIndicationFilter(serial, indicationFilter);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSimCardPower(int32_t serial, bool powerUp) {
+    mRealService->setSimCardPower(serial, powerUp);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::responseAcknowledgement() {
+    mRealService->responseAcknowledgement();
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCarrierInfoForImsiEncryption(int32_t serial, const ::android::hardware::radio::V1_1::ImsiEncryptionInfo& imsiEncryptionInfo) {
+    mRealService->setCarrierInfoForImsiEncryption(serial, imsiEncryptionInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSimCardPower_1_1(int32_t serial, ::android::hardware::radio::V1_1::CardPowerState powerUp) {
+    mRealService->setSimCardPower_1_1(serial, powerUp);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startNetworkScan(int32_t serial, const ::android::hardware::radio::V1_1::NetworkScanRequest& request) {
+    mRealService->startNetworkScan(serial, request);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::stopNetworkScan(int32_t serial) {
+    mRealService->stopNetworkScan(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startKeepalive(int32_t serial, const ::android::hardware::radio::V1_1::KeepaliveRequest& keepalive) {
+    mRealService->startKeepalive(serial, keepalive);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::stopKeepalive(int32_t serial, int32_t sessionHandle) {
+    mRealService->stopKeepalive(serial, sessionHandle);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startNetworkScan_1_2(int32_t serial, const ::android::hardware::radio::V1_2::NetworkScanRequest& request) {
+    mRealService->startNetworkScan_1_2(serial, request);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setIndicationFilter_1_2(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_2::IndicationFilter> indicationFilter) {
+    mRealService->setIndicationFilter_1_2(serial, indicationFilter);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSignalStrengthReportingCriteria(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDb, const ::android::hardware::hidl_vec<int32_t>& thresholdsDbm, ::android::hardware::radio::V1_2::AccessNetwork accessNetwork) {
+    mRealService->setSignalStrengthReportingCriteria(serial, hysteresisMs, hysteresisDb, thresholdsDbm, accessNetwork);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setLinkCapacityReportingCriteria(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDlKbps, int32_t hysteresisUlKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsDownlinkKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsUplinkKbps, ::android::hardware::radio::V1_2::AccessNetwork accessNetwork) {
+    mRealService->setLinkCapacityReportingCriteria(serial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, thresholdsDownlinkKbps, thresholdsUplinkKbps, accessNetwork);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setupDataCall_1_2(int32_t serial, ::android::hardware::radio::V1_2::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool roamingAllowed, bool isRoaming, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses) {
+    mRealService->setupDataCall_1_2(serial, accessNetwork, dataProfileInfo, modemCognitive, roamingAllowed, isRoaming, reason, addresses, dnses);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::deactivateDataCall_1_2(int32_t serial, int32_t cid, ::android::hardware::radio::V1_2::DataRequestReason reason) {
+    mRealService->deactivateDataCall_1_2(serial, cid, reason);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSystemSelectionChannels(int32_t serial, bool specifyChannels, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_1::RadioAccessSpecifier>& specifiers) {
+    mRealService->setSystemSelectionChannels(serial, specifyChannels, specifiers);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::enableModem(int32_t serial, bool on) {
+    mRealService->enableModem(serial, on);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getModemStackStatus(int32_t serial) {
+    mRealService->getModemStackStatus(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setupDataCall_1_4(int32_t serial, ::android::hardware::radio::V1_4::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_4::DataProfileInfo& dataProfileInfo, bool roamingAllowed, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses) {
+    mRealService->setupDataCall_1_4(serial, accessNetwork, dataProfileInfo, roamingAllowed, reason, addresses, dnses);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setInitialAttachApn_1_4(int32_t serial, const ::android::hardware::radio::V1_4::DataProfileInfo& dataProfileInfo) {
+    mRealService->setInitialAttachApn_1_4(serial, dataProfileInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setDataProfile_1_4(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::DataProfileInfo>& profiles) {
+    mRealService->setDataProfile_1_4(serial, profiles);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::emergencyDial(int32_t serial, const ::android::hardware::radio::V1_0::Dial& dialInfo, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::EmergencyServiceCategory> categories, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& urns, ::android::hardware::radio::V1_4::EmergencyCallRouting routing, bool hasKnownUserIntentEmergency, bool isTesting) {
+    mRealService->emergencyDial(serial, dialInfo, categories, urns, routing, hasKnownUserIntentEmergency, isTesting);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startNetworkScan_1_4(int32_t serial, const ::android::hardware::radio::V1_2::NetworkScanRequest& request) {
+    mRealService->startNetworkScan_1_4(serial, request);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getPreferredNetworkTypeBitmap(int32_t serial) {
+    mRealService->getPreferredNetworkTypeBitmap(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setPreferredNetworkTypeBitmap(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap) {
+    mRealService->setPreferredNetworkTypeBitmap(serial, networkTypeBitmap);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setAllowedCarriers_1_4(int32_t serial, const ::android::hardware::radio::V1_4::CarrierRestrictionsWithPriority& carriers, ::android::hardware::radio::V1_4::SimLockMultiSimPolicy multiSimPolicy) {
+    mRealService->setAllowedCarriers_1_4(serial, carriers, multiSimPolicy);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getAllowedCarriers_1_4(int32_t serial) {
+    mRealService->getAllowedCarriers_1_4(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSignalStrength_1_4(int32_t serial) {
+    mRealService->getSignalStrength_1_4(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSignalStrengthReportingCriteria_1_5(int32_t serial, const ::android::hardware::radio::V1_5::SignalThresholdInfo& signalThresholdInfo, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork) {
+    mRealService->setSignalStrengthReportingCriteria_1_5(serial, signalThresholdInfo, accessNetwork);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setLinkCapacityReportingCriteria_1_5(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDlKbps, int32_t hysteresisUlKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsDownlinkKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsUplinkKbps, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork) {
+    mRealService->setLinkCapacityReportingCriteria_1_5(serial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, thresholdsDownlinkKbps, thresholdsUplinkKbps, accessNetwork);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::enableUiccApplications(int32_t serial, bool enable) {
+    mRealService->enableUiccApplications(serial, enable);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::areUiccApplicationsEnabled(int32_t serial) {
+    mRealService->areUiccApplicationsEnabled(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSystemSelectionChannels_1_5(int32_t serial, bool specifyChannels, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::RadioAccessSpecifier>& specifiers) {
+    mRealService->setSystemSelectionChannels_1_5(serial, specifyChannels, specifiers);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startNetworkScan_1_5(int32_t serial, const ::android::hardware::radio::V1_5::NetworkScanRequest& request) {
+    mRealService->startNetworkScan_1_5(serial, request);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setupDataCall_1_5(int32_t serial, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_5::DataProfileInfo& dataProfileInfo, bool roamingAllowed, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::LinkAddress>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses) {
+    mRealService->setupDataCall_1_5(serial, accessNetwork, dataProfileInfo, roamingAllowed, reason, addresses, dnses);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setInitialAttachApn_1_5(int32_t serial, const ::android::hardware::radio::V1_5::DataProfileInfo& dataProfileInfo) {
+    mRealService->setInitialAttachApn_1_5(serial, dataProfileInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setDataProfile_1_5(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::DataProfileInfo>& profiles) {
+    mRealService->setDataProfile_1_5(serial, profiles);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setRadioPower_1_5(int32_t serial, bool powerOn, bool forEmergencyCall, bool preferredForEmergencyCall) {
+    mRealService->setRadioPower_1_5(serial, powerOn, forEmergencyCall, preferredForEmergencyCall);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setIndicationFilter_1_5(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_5::IndicationFilter> indicationFilter) {
+    mRealService->setIndicationFilter_1_5(serial, indicationFilter);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getBarringInfo(int32_t serial) {
+    mRealService->getBarringInfo(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getVoiceRegistrationState_1_5(int32_t serial) {
+    mRealService->getVoiceRegistrationState_1_5(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getDataRegistrationState_1_5(int32_t serial) {
+    mRealService->getDataRegistrationState_1_5(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setNetworkSelectionModeManual_1_5(int32_t serial, const ::android::hardware::hidl_string& operatorNumeric, ::android::hardware::radio::V1_5::RadioAccessNetworks ran) {
+    mRealService->setNetworkSelectionModeManual_1_5(serial, operatorNumeric, ran);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendCdmaSmsExpectMore(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms) {
+    mRealService->sendCdmaSmsExpectMore(serial, sms);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::supplySimDepersonalization(int32_t serial, ::android::hardware::radio::V1_5::PersoSubstate persoType, const ::android::hardware::hidl_string& controlKey) {
+    mRealService->supplySimDepersonalization(serial, persoType, controlKey);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setRadioPower_1_6(int32_t serial, bool powerOn, bool forEmergencyCall, bool preferredForEmergencyCall) {
+    mRealService->setRadioPower_1_6(serial, powerOn, forEmergencyCall, preferredForEmergencyCall);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getDataCallList_1_6(int32_t serial) {
+    mRealService->getDataCallList_1_6(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setupDataCall_1_6(int32_t serial, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_5::DataProfileInfo& dataProfileInfo, bool roamingAllowed, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::LinkAddress>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses, int32_t pduSessionId, const ::android::hardware::radio::V1_6::OptionalSliceInfo& sliceInfo, const ::android::hardware::radio::V1_6::OptionalTrafficDescriptor& trafficDescriptor, bool matchAllRuleAllowed) {
+    mRealService->setupDataCall_1_6(serial, accessNetwork, dataProfileInfo, roamingAllowed, reason, addresses, dnses, pduSessionId, sliceInfo, trafficDescriptor, matchAllRuleAllowed);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendSms_1_6(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message) {
+    mRealService->sendSms_1_6(serial, message);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendSmsExpectMore_1_6(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message) {
+    mRealService->sendSmsExpectMore_1_6(serial, message);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendCdmaSms_1_6(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms) {
+    mRealService->sendCdmaSms_1_6(serial, sms);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::sendCdmaSmsExpectMore_1_6(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms) {
+    mRealService->sendCdmaSmsExpectMore_1_6(serial, sms);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setSimCardPower_1_6(int32_t serial, ::android::hardware::radio::V1_1::CardPowerState powerUp) {
+    mRealService->setSimCardPower_1_6(serial, powerUp);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setNrDualConnectivityState(int32_t serial, ::android::hardware::radio::V1_6::NrDualConnectivityState nrDualConnectivityState) {
+    mRealService->setNrDualConnectivityState(serial, nrDualConnectivityState);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::isNrDualConnectivityEnabled(int32_t serial) {
+    mRealService->isNrDualConnectivityEnabled(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::allocatePduSessionId(int32_t serial) {
+    mRealService->allocatePduSessionId(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::releasePduSessionId(int32_t serial, int32_t id) {
+    mRealService->releasePduSessionId(serial, id);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::startHandover(int32_t serial, int32_t callId) {
+    mRealService->startHandover(serial, callId);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::cancelHandover(int32_t serial, int32_t callId) {
+    mRealService->cancelHandover(serial, callId);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setAllowedNetworkTypesBitmap(uint32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap) {
+    mRealService->setAllowedNetworkTypesBitmap(serial, networkTypeBitmap);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getAllowedNetworkTypesBitmap(int32_t serial) {
+    mRealService->getAllowedNetworkTypesBitmap(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setDataThrottling(int32_t serial, ::android::hardware::radio::V1_6::DataThrottlingAction dataThrottlingAction, int64_t completionDurationMillis) {
+    mRealService->setDataThrottling(serial, dataThrottlingAction, completionDurationMillis);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::emergencyDial_1_6(int32_t serial, const ::android::hardware::radio::V1_0::Dial& dialInfo, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::EmergencyServiceCategory> categories, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& urns, ::android::hardware::radio::V1_4::EmergencyCallRouting routing, bool hasKnownUserIntentEmergency, bool isTesting) {
+    mRealService->emergencyDial_1_6(serial, dialInfo, categories, urns, routing, hasKnownUserIntentEmergency, isTesting);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSystemSelectionChannels(int32_t serial) {
+    mRealService->getSystemSelectionChannels(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCellInfoList_1_6(int32_t serial) {
+    mRealService->getCellInfoList_1_6(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getVoiceRegistrationState_1_6(int32_t serial) {
+    mRealService->getVoiceRegistrationState_1_6(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSignalStrength_1_6(int32_t serial) {
+    mRealService->getSignalStrength_1_6(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getDataRegistrationState_1_6(int32_t serial) {
+    mRealService->getDataRegistrationState_1_6(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getCurrentCalls_1_6(int32_t serial) {
+    mRealService->getCurrentCalls_1_6(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSlicingConfig(int32_t serial) {
+    mRealService->getSlicingConfig(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setCarrierInfoForImsiEncryption_1_6(int32_t serial, const ::android::hardware::radio::V1_6::ImsiEncryptionInfo& imsiEncryptionInfo) {
+    mRealService->setCarrierInfoForImsiEncryption_1_6(serial, imsiEncryptionInfo);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSimPhonebookRecords(int32_t serial) {
+    mRealService->getSimPhonebookRecords(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getSimPhonebookCapacity(int32_t serial) {
+    mRealService->getSimPhonebookCapacity(serial);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::updateSimPhonebookRecords(int32_t serial, const ::android::hardware::radio::V1_6::PhonebookRecordInfo& recordInfo) {
+    mRealService->updateSimPhonebookRecords(serial, recordInfo);
+    return Void();
+}
+
+
+Return<void> RadioImpl_1_6_Proxy::interfaceChain(interfaceChain_cb _hidl_cb) {
+    mRealService->interfaceChain(_hidl_cb);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::debug(const ::android::hardware::hidl_handle& fd, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& options) {
+    mRealService->debug(fd, options);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::interfaceDescriptor(interfaceDescriptor_cb _hidl_cb) {
+    mRealService->interfaceDescriptor(_hidl_cb);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getHashChain(getHashChain_cb _hidl_cb) {
+    mRealService->getHashChain(_hidl_cb);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::setHALInstrumentation() {
+    mRealService->setHALInstrumentation();
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::ping() {
+    mRealService->ping();
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::getDebugInfo(getDebugInfo_cb _hidl_cb) {
+    mRealService->getDebugInfo(_hidl_cb);
+    return Void();
+}
+
+Return<void> RadioImpl_1_6_Proxy::notifySyspropsChanged() {
+    mRealService->notifySyspropsChanged();
+    return Void();
+}
\ No newline at end of file
diff --git a/hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.h b/hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.h
new file mode 100755
index 0000000000..964e2c8ec2
--- /dev/null
+++ b/hardware/interfaces/radio/1.6/radio_hal_proxy/ril_service_1_6_proxy.h
@@ -0,0 +1,482 @@
+#pragma once
+#define LOG_TAG "RADIO_HAL_PROXY"
+#include <log/log.h>
+#include <memory>
+#include <android/hardware/radio/1.6/IRadio.h>
+#include <android/hardware/radio/1.6/IRadioResponse.h>
+#include <android/hardware/radio/1.6/IRadioIndication.h>
+#include <android/hardware/radio/1.6/types.h>
+#include <utils/SystemClock.h>
+#include <inttypes.h>
+#include "proxy_common.h"
+#include "RadioIndication_V1_6_Proxy.h"
+#include "RadioResponse_V1_6_Proxy.h"
+
+
+// revisit the header files and using primitive
+using namespace android::hardware::radio;
+using namespace android::hardware::radio::V1_0;
+using namespace android::hardware::radio::V1_1;
+using namespace android::hardware::radio::V1_2;
+using namespace android::hardware::radio::V1_3;
+using namespace android::hardware::radio::V1_4;
+using namespace android::hardware::radio::V1_5;
+using namespace android::hardware::radio::V1_6;
+//using namespace android::hardware::radio::deprecated::V1_0;
+using ::android::hardware::Return;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_bitfield;
+using ::android::hardware::Void;
+using ::android::hardware::hidl_death_recipient;
+
+//using android::requestToString;
+using android::sp;
+
+class RadioImpl_1_6_Proxy : public ::android::hardware::radio::V1_6::IRadio, public ::android::hardware::hidl_death_recipient {
+    sp<RadioResponse_v1_6_Proxy> mRadioResponseV1_6;
+    sp<RadioIndication_v1_6_Proxy> mRadioIndicationV1_6;
+    sp<::android::hardware::radio::V1_6::IRadio> mRealService;
+    int32_t mInstance;
+
+public:
+    RadioImpl_1_6_Proxy(int32_t instance, sp<::android::hardware::radio::V1_6::IRadio> realService) {
+        mInstance = instance;
+        mRealService = realService;
+
+        mRadioResponseV1_6 = new (std::nothrow) RadioResponse_v1_6_Proxy();
+
+        mRadioIndicationV1_6 = new (std::nothrow) RadioIndication_v1_6_Proxy();
+
+        mRealService->setResponseFunctions(mRadioResponseV1_6, mRadioIndicationV1_6);
+
+    }
+
+    virtual ::android::status_t registerAsService(const std::string &serviceName);
+
+    virtual const char *getDescriptor() {
+        return ::android::hardware::radio::V1_6::IRadio::descriptor;
+    }
+
+    void serviceDied(uint64_t,
+            const ::android::wp<::android::hidl::base::V1_0::IBase>&);
+
+    Return<void> setResponseFunctions(const ::android::sp<::android::hardware::radio::V1_0::IRadioResponse>& radioResponse, const ::android::sp<::android::hardware::radio::V1_0::IRadioIndication>& radioIndication);
+
+    Return<void> getIccCardStatus(int32_t serial);
+
+    Return<void> supplyIccPinForApp(int32_t serial, const ::android::hardware::hidl_string& pin, const ::android::hardware::hidl_string& aid);
+
+    Return<void> supplyIccPukForApp(int32_t serial, const ::android::hardware::hidl_string& puk, const ::android::hardware::hidl_string& pin, const ::android::hardware::hidl_string& aid);
+
+    Return<void> supplyIccPin2ForApp(int32_t serial, const ::android::hardware::hidl_string& pin2, const ::android::hardware::hidl_string& aid);
+
+    Return<void> supplyIccPuk2ForApp(int32_t serial, const ::android::hardware::hidl_string& puk2, const ::android::hardware::hidl_string& pin2, const ::android::hardware::hidl_string& aid);
+
+    Return<void> changeIccPinForApp(int32_t serial, const ::android::hardware::hidl_string& oldPin, const ::android::hardware::hidl_string& newPin, const ::android::hardware::hidl_string& aid);
+
+    Return<void> changeIccPin2ForApp(int32_t serial, const ::android::hardware::hidl_string& oldPin2, const ::android::hardware::hidl_string& newPin2, const ::android::hardware::hidl_string& aid);
+
+    Return<void> supplyNetworkDepersonalization(int32_t serial, const ::android::hardware::hidl_string& netPin);
+
+    Return<void> getCurrentCalls(int32_t serial);
+
+    Return<void> dial(int32_t serial, const ::android::hardware::radio::V1_0::Dial& dialInfo);
+
+    Return<void> getImsiForApp(int32_t serial, const ::android::hardware::hidl_string& aid);
+
+    Return<void> hangup(int32_t serial, int32_t gsmIndex);
+
+    Return<void> hangupWaitingOrBackground(int32_t serial);
+
+    Return<void> hangupForegroundResumeBackground(int32_t serial);
+
+    Return<void> switchWaitingOrHoldingAndActive(int32_t serial);
+
+    Return<void> conference(int32_t serial);
+
+    Return<void> rejectCall(int32_t serial);
+
+    Return<void> getLastCallFailCause(int32_t serial);
+
+    Return<void> getSignalStrength(int32_t serial);
+
+    Return<void> getVoiceRegistrationState(int32_t serial);
+
+    Return<void> getDataRegistrationState(int32_t serial);
+
+    Return<void> getOperator(int32_t serial);
+
+    Return<void> setRadioPower(int32_t serial, bool on);
+
+    Return<void> sendDtmf(int32_t serial, const ::android::hardware::hidl_string& s);
+
+    Return<void> sendSms(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message);
+
+    Return<void> sendSMSExpectMore(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message);
+
+    Return<void> setupDataCall(int32_t serial, ::android::hardware::radio::V1_0::RadioTechnology radioTechnology, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool roamingAllowed, bool isRoaming);
+
+    Return<void> iccIOForApp(int32_t serial, const ::android::hardware::radio::V1_0::IccIo& iccIo);
+
+    Return<void> sendUssd(int32_t serial, const ::android::hardware::hidl_string& ussd);
+
+    Return<void> cancelPendingUssd(int32_t serial);
+
+    Return<void> getClir(int32_t serial);
+
+    Return<void> setClir(int32_t serial, int32_t status);
+
+    Return<void> getCallForwardStatus(int32_t serial, const ::android::hardware::radio::V1_0::CallForwardInfo& callInfo);
+
+    Return<void> setCallForward(int32_t serial, const ::android::hardware::radio::V1_0::CallForwardInfo& callInfo);
+
+    Return<void> getCallWaiting(int32_t serial, int32_t serviceClass);
+
+    Return<void> setCallWaiting(int32_t serial, bool enable, int32_t serviceClass);
+
+    Return<void> acknowledgeLastIncomingGsmSms(int32_t serial, bool success, ::android::hardware::radio::V1_0::SmsAcknowledgeFailCause cause);
+
+    Return<void> acceptCall(int32_t serial);
+
+    Return<void> deactivateDataCall(int32_t serial, int32_t cid, bool reasonRadioShutDown);
+
+    Return<void> getFacilityLockForApp(int32_t serial, const ::android::hardware::hidl_string& facility, const ::android::hardware::hidl_string& password, int32_t serviceClass, const ::android::hardware::hidl_string& appId);
+
+    Return<void> setFacilityLockForApp(int32_t serial, const ::android::hardware::hidl_string& facility, bool lockState, const ::android::hardware::hidl_string& password, int32_t serviceClass, const ::android::hardware::hidl_string& appId);
+
+    Return<void> setBarringPassword(int32_t serial, const ::android::hardware::hidl_string& facility, const ::android::hardware::hidl_string& oldPassword, const ::android::hardware::hidl_string& newPassword);
+
+    Return<void> getNetworkSelectionMode(int32_t serial);
+
+    Return<void> setNetworkSelectionModeAutomatic(int32_t serial);
+
+    Return<void> setNetworkSelectionModeManual(int32_t serial, const ::android::hardware::hidl_string& operatorNumeric);
+
+    Return<void> getAvailableNetworks(int32_t serial);
+
+    Return<void> startDtmf(int32_t serial, const ::android::hardware::hidl_string& s);
+
+    Return<void> stopDtmf(int32_t serial);
+
+    Return<void> getBasebandVersion(int32_t serial);
+
+    Return<void> separateConnection(int32_t serial, int32_t gsmIndex);
+
+    Return<void> setMute(int32_t serial, bool enable);
+
+    Return<void> getMute(int32_t serial);
+
+    Return<void> getClip(int32_t serial);
+
+    Return<void> getDataCallList(int32_t serial);
+
+    Return<void> setSuppServiceNotifications(int32_t serial, bool enable);
+
+    Return<void> writeSmsToSim(int32_t serial, const ::android::hardware::radio::V1_0::SmsWriteArgs& smsWriteArgs);
+
+    Return<void> deleteSmsOnSim(int32_t serial, int32_t index);
+
+    Return<void> setBandMode(int32_t serial, ::android::hardware::radio::V1_0::RadioBandMode mode);
+
+    Return<void> getAvailableBandModes(int32_t serial);
+
+    Return<void> sendEnvelope(int32_t serial, const ::android::hardware::hidl_string& command);
+
+    Return<void> sendTerminalResponseToSim(int32_t serial, const ::android::hardware::hidl_string& commandResponse);
+
+    Return<void> handleStkCallSetupRequestFromSim(int32_t serial, bool accept);
+
+    Return<void> explicitCallTransfer(int32_t serial);
+
+    Return<void> setPreferredNetworkType(int32_t serial, ::android::hardware::radio::V1_0::PreferredNetworkType nwType);
+
+    Return<void> getPreferredNetworkType(int32_t serial);
+
+    Return<void> getNeighboringCids(int32_t serial);
+
+    Return<void> setLocationUpdates(int32_t serial, bool enable);
+
+    Return<void> setCdmaSubscriptionSource(int32_t serial, ::android::hardware::radio::V1_0::CdmaSubscriptionSource cdmaSub);
+
+    Return<void> setCdmaRoamingPreference(int32_t serial, ::android::hardware::radio::V1_0::CdmaRoamingType type);
+
+    Return<void> getCdmaRoamingPreference(int32_t serial);
+
+    Return<void> setTTYMode(int32_t serial, ::android::hardware::radio::V1_0::TtyMode mode);
+
+    Return<void> getTTYMode(int32_t serial);
+
+    Return<void> setPreferredVoicePrivacy(int32_t serial, bool enable);
+
+    Return<void> getPreferredVoicePrivacy(int32_t serial);
+
+    Return<void> sendCDMAFeatureCode(int32_t serial, const ::android::hardware::hidl_string& featureCode);
+
+    Return<void> sendBurstDtmf(int32_t serial, const ::android::hardware::hidl_string& dtmf, int32_t on, int32_t off);
+
+    Return<void> sendCdmaSms(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms);
+
+    Return<void> acknowledgeLastIncomingCdmaSms(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsAck& smsAck);
+
+    Return<void> getGsmBroadcastConfig(int32_t serial);
+
+    Return<void> setGsmBroadcastConfig(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::GsmBroadcastSmsConfigInfo>& configInfo);
+
+    Return<void> setGsmBroadcastActivation(int32_t serial, bool activate);
+
+    Return<void> getCdmaBroadcastConfig(int32_t serial);
+
+    Return<void> setCdmaBroadcastConfig(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CdmaBroadcastSmsConfigInfo>& configInfo);
+
+    Return<void> setCdmaBroadcastActivation(int32_t serial, bool activate);
+
+    Return<void> getCDMASubscription(int32_t serial);
+
+    Return<void> writeSmsToRuim(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsWriteArgs& cdmaSms);
+
+    Return<void> deleteSmsOnRuim(int32_t serial, int32_t index);
+
+    Return<void> getDeviceIdentity(int32_t serial);
+
+    Return<void> exitEmergencyCallbackMode(int32_t serial);
+
+    Return<void> getSmscAddress(int32_t serial);
+
+    Return<void> setSmscAddress(int32_t serial, const ::android::hardware::hidl_string& smsc);
+
+    Return<void> reportSmsMemoryStatus(int32_t serial, bool available);
+
+    Return<void> reportStkServiceIsRunning(int32_t serial);
+
+    Return<void> getCdmaSubscriptionSource(int32_t serial);
+
+    Return<void> requestIsimAuthentication(int32_t serial, const ::android::hardware::hidl_string& challenge);
+
+    Return<void> acknowledgeIncomingGsmSmsWithPdu(int32_t serial, bool success, const ::android::hardware::hidl_string& ackPdu);
+
+    Return<void> sendEnvelopeWithStatus(int32_t serial, const ::android::hardware::hidl_string& contents);
+
+    Return<void> getVoiceRadioTechnology(int32_t serial);
+
+    Return<void> getCellInfoList(int32_t serial);
+
+    Return<void> setCellInfoListRate(int32_t serial, int32_t rate);
+
+    Return<void> setInitialAttachApn(int32_t serial, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool isRoaming);
+
+    Return<void> getImsRegistrationState(int32_t serial);
+
+    Return<void> sendImsSms(int32_t serial, const ::android::hardware::radio::V1_0::ImsSmsMessage& message);
+
+    Return<void> iccTransmitApduBasicChannel(int32_t serial, const ::android::hardware::radio::V1_0::SimApdu& message);
+
+    Return<void> iccOpenLogicalChannel(int32_t serial, const ::android::hardware::hidl_string& aid, int32_t p2);
+
+    Return<void> iccCloseLogicalChannel(int32_t serial, int32_t channelId);
+
+    Return<void> iccTransmitApduLogicalChannel(int32_t serial, const ::android::hardware::radio::V1_0::SimApdu& message);
+
+    Return<void> nvReadItem(int32_t serial, ::android::hardware::radio::V1_0::NvItem itemId);
+
+    Return<void> nvWriteItem(int32_t serial, const ::android::hardware::radio::V1_0::NvWriteItem& item);
+
+    Return<void> nvWriteCdmaPrl(int32_t serial, const ::android::hardware::hidl_vec<uint8_t>& prl);
+
+    Return<void> nvResetConfig(int32_t serial, ::android::hardware::radio::V1_0::ResetNvType resetType);
+
+    Return<void> setUiccSubscription(int32_t serial, const ::android::hardware::radio::V1_0::SelectUiccSub& uiccSub);
+
+    Return<void> setDataAllowed(int32_t serial, bool allow);
+
+    Return<void> getHardwareConfig(int32_t serial);
+
+    Return<void> requestIccSimAuthentication(int32_t serial, int32_t authContext, const ::android::hardware::hidl_string& authData, const ::android::hardware::hidl_string& aid);
+
+    Return<void> setDataProfile(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::DataProfileInfo>& profiles, bool isRoaming);
+
+    Return<void> requestShutdown(int32_t serial);
+
+    Return<void> getRadioCapability(int32_t serial);
+
+    Return<void> setRadioCapability(int32_t serial, const ::android::hardware::radio::V1_0::RadioCapability& rc);
+
+    Return<void> startLceService(int32_t serial, int32_t reportInterval, bool pullMode);
+
+    Return<void> stopLceService(int32_t serial);
+
+    Return<void> pullLceData(int32_t serial);
+
+    Return<void> getModemActivityInfo(int32_t serial);
+
+    Return<void> setAllowedCarriers(int32_t serial, bool allAllowed, const ::android::hardware::radio::V1_0::CarrierRestrictions& carriers);
+
+    Return<void> getAllowedCarriers(int32_t serial);
+
+    Return<void> sendDeviceState(int32_t serial, ::android::hardware::radio::V1_0::DeviceStateType deviceStateType, bool state);
+
+    Return<void> setIndicationFilter(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_0::IndicationFilter> indicationFilter);
+
+    Return<void> setSimCardPower(int32_t serial, bool powerUp);
+
+    Return<void> responseAcknowledgement();
+
+    Return<void> setCarrierInfoForImsiEncryption(int32_t serial, const ::android::hardware::radio::V1_1::ImsiEncryptionInfo& imsiEncryptionInfo);
+
+    Return<void> setSimCardPower_1_1(int32_t serial, ::android::hardware::radio::V1_1::CardPowerState powerUp);
+
+    Return<void> startNetworkScan(int32_t serial, const ::android::hardware::radio::V1_1::NetworkScanRequest& request);
+
+    Return<void> stopNetworkScan(int32_t serial);
+
+    Return<void> startKeepalive(int32_t serial, const ::android::hardware::radio::V1_1::KeepaliveRequest& keepalive);
+
+    Return<void> stopKeepalive(int32_t serial, int32_t sessionHandle);
+
+    Return<void> startNetworkScan_1_2(int32_t serial, const ::android::hardware::radio::V1_2::NetworkScanRequest& request);
+
+    Return<void> setIndicationFilter_1_2(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_2::IndicationFilter> indicationFilter);
+
+    Return<void> setSignalStrengthReportingCriteria(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDb, const ::android::hardware::hidl_vec<int32_t>& thresholdsDbm, ::android::hardware::radio::V1_2::AccessNetwork accessNetwork);
+
+    Return<void> setLinkCapacityReportingCriteria(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDlKbps, int32_t hysteresisUlKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsDownlinkKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsUplinkKbps, ::android::hardware::radio::V1_2::AccessNetwork accessNetwork);
+
+    Return<void> setupDataCall_1_2(int32_t serial, ::android::hardware::radio::V1_2::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool roamingAllowed, bool isRoaming, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses);
+
+    Return<void> deactivateDataCall_1_2(int32_t serial, int32_t cid, ::android::hardware::radio::V1_2::DataRequestReason reason);
+
+    Return<void> setSystemSelectionChannels(int32_t serial, bool specifyChannels, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_1::RadioAccessSpecifier>& specifiers);
+
+    Return<void> enableModem(int32_t serial, bool on);
+
+    Return<void> getModemStackStatus(int32_t serial);
+
+    Return<void> setupDataCall_1_4(int32_t serial, ::android::hardware::radio::V1_4::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_4::DataProfileInfo& dataProfileInfo, bool roamingAllowed, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses);
+
+    Return<void> setInitialAttachApn_1_4(int32_t serial, const ::android::hardware::radio::V1_4::DataProfileInfo& dataProfileInfo);
+
+    Return<void> setDataProfile_1_4(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_4::DataProfileInfo>& profiles);
+
+    Return<void> emergencyDial(int32_t serial, const ::android::hardware::radio::V1_0::Dial& dialInfo, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::EmergencyServiceCategory> categories, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& urns, ::android::hardware::radio::V1_4::EmergencyCallRouting routing, bool hasKnownUserIntentEmergency, bool isTesting);
+
+    Return<void> startNetworkScan_1_4(int32_t serial, const ::android::hardware::radio::V1_2::NetworkScanRequest& request);
+
+    Return<void> getPreferredNetworkTypeBitmap(int32_t serial);
+
+    Return<void> setPreferredNetworkTypeBitmap(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap);
+
+    Return<void> setAllowedCarriers_1_4(int32_t serial, const ::android::hardware::radio::V1_4::CarrierRestrictionsWithPriority& carriers, ::android::hardware::radio::V1_4::SimLockMultiSimPolicy multiSimPolicy);
+
+    Return<void> getAllowedCarriers_1_4(int32_t serial);
+
+    Return<void> getSignalStrength_1_4(int32_t serial);
+
+    Return<void> setSignalStrengthReportingCriteria_1_5(int32_t serial, const ::android::hardware::radio::V1_5::SignalThresholdInfo& signalThresholdInfo, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork);
+
+    Return<void> setLinkCapacityReportingCriteria_1_5(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDlKbps, int32_t hysteresisUlKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsDownlinkKbps, const ::android::hardware::hidl_vec<int32_t>& thresholdsUplinkKbps, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork);
+
+    Return<void> enableUiccApplications(int32_t serial, bool enable);
+
+    Return<void> areUiccApplicationsEnabled(int32_t serial);
+
+    Return<void> setSystemSelectionChannels_1_5(int32_t serial, bool specifyChannels, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::RadioAccessSpecifier>& specifiers);
+
+    Return<void> startNetworkScan_1_5(int32_t serial, const ::android::hardware::radio::V1_5::NetworkScanRequest& request);
+
+    Return<void> setupDataCall_1_5(int32_t serial, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_5::DataProfileInfo& dataProfileInfo, bool roamingAllowed, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::LinkAddress>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses);
+
+    Return<void> setInitialAttachApn_1_5(int32_t serial, const ::android::hardware::radio::V1_5::DataProfileInfo& dataProfileInfo);
+
+    Return<void> setDataProfile_1_5(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::DataProfileInfo>& profiles);
+
+    Return<void> setRadioPower_1_5(int32_t serial, bool powerOn, bool forEmergencyCall, bool preferredForEmergencyCall);
+
+    Return<void> setIndicationFilter_1_5(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_5::IndicationFilter> indicationFilter);
+
+    Return<void> getBarringInfo(int32_t serial);
+
+    Return<void> getVoiceRegistrationState_1_5(int32_t serial);
+
+    Return<void> getDataRegistrationState_1_5(int32_t serial);
+
+    Return<void> setNetworkSelectionModeManual_1_5(int32_t serial, const ::android::hardware::hidl_string& operatorNumeric, ::android::hardware::radio::V1_5::RadioAccessNetworks ran);
+
+    Return<void> sendCdmaSmsExpectMore(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms);
+
+    Return<void> supplySimDepersonalization(int32_t serial, ::android::hardware::radio::V1_5::PersoSubstate persoType, const ::android::hardware::hidl_string& controlKey);
+
+    Return<void> setRadioPower_1_6(int32_t serial, bool powerOn, bool forEmergencyCall, bool preferredForEmergencyCall);
+
+    Return<void> getDataCallList_1_6(int32_t serial);
+
+    Return<void> setupDataCall_1_6(int32_t serial, ::android::hardware::radio::V1_5::AccessNetwork accessNetwork, const ::android::hardware::radio::V1_5::DataProfileInfo& dataProfileInfo, bool roamingAllowed, ::android::hardware::radio::V1_2::DataRequestReason reason, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_5::LinkAddress>& addresses, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& dnses, int32_t pduSessionId, const ::android::hardware::radio::V1_6::OptionalSliceInfo& sliceInfo, const ::android::hardware::radio::V1_6::OptionalTrafficDescriptor& trafficDescriptor, bool matchAllRuleAllowed);
+
+    Return<void> sendSms_1_6(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message);
+
+    Return<void> sendSmsExpectMore_1_6(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message);
+
+    Return<void> sendCdmaSms_1_6(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms);
+
+    Return<void> sendCdmaSmsExpectMore_1_6(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms);
+
+    Return<void> setSimCardPower_1_6(int32_t serial, ::android::hardware::radio::V1_1::CardPowerState powerUp);
+
+    Return<void> setNrDualConnectivityState(int32_t serial, ::android::hardware::radio::V1_6::NrDualConnectivityState nrDualConnectivityState);
+
+    Return<void> isNrDualConnectivityEnabled(int32_t serial);
+
+    Return<void> allocatePduSessionId(int32_t serial);
+
+    Return<void> releasePduSessionId(int32_t serial, int32_t id);
+
+    Return<void> startHandover(int32_t serial, int32_t callId);
+
+    Return<void> cancelHandover(int32_t serial, int32_t callId);
+
+    Return<void> setAllowedNetworkTypesBitmap(uint32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::RadioAccessFamily> networkTypeBitmap);
+
+    Return<void> getAllowedNetworkTypesBitmap(int32_t serial);
+
+    Return<void> setDataThrottling(int32_t serial, ::android::hardware::radio::V1_6::DataThrottlingAction dataThrottlingAction, int64_t completionDurationMillis);
+
+    Return<void> emergencyDial_1_6(int32_t serial, const ::android::hardware::radio::V1_0::Dial& dialInfo, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_4::EmergencyServiceCategory> categories, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& urns, ::android::hardware::radio::V1_4::EmergencyCallRouting routing, bool hasKnownUserIntentEmergency, bool isTesting);
+
+    Return<void> getSystemSelectionChannels(int32_t serial);
+
+    Return<void> getCellInfoList_1_6(int32_t serial);
+
+    Return<void> getVoiceRegistrationState_1_6(int32_t serial);
+
+    Return<void> getSignalStrength_1_6(int32_t serial);
+
+    Return<void> getDataRegistrationState_1_6(int32_t serial);
+
+    Return<void> getCurrentCalls_1_6(int32_t serial);
+
+    Return<void> getSlicingConfig(int32_t serial);
+
+    Return<void> setCarrierInfoForImsiEncryption_1_6(int32_t serial, const ::android::hardware::radio::V1_6::ImsiEncryptionInfo& imsiEncryptionInfo);
+
+    Return<void> getSimPhonebookRecords(int32_t serial);
+
+    Return<void> getSimPhonebookCapacity(int32_t serial);
+
+    Return<void> updateSimPhonebookRecords(int32_t serial, const ::android::hardware::radio::V1_6::PhonebookRecordInfo& recordInfo);
+
+    Return<void> interfaceChain(interfaceChain_cb _hidl_cb);
+
+    Return<void> debug(const ::android::hardware::hidl_handle& fd, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& options);
+
+    Return<void> interfaceDescriptor(interfaceDescriptor_cb _hidl_cb);
+
+    Return<void> getHashChain(getHashChain_cb _hidl_cb);
+
+    Return<void> setHALInstrumentation();
+
+    Return<void> ping();
+
+    Return<void> getDebugInfo(getDebugInfo_cb _hidl_cb);
+
+    Return<void> notifySyspropsChanged();
+};
\ No newline at end of file
-- 
2.17.1

